
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Profiles
 * 
 */
export type Profiles = $Result.DefaultSelection<Prisma.$ProfilesPayload>
/**
 * Model InvalidTokens
 * 
 */
export type InvalidTokens = $Result.DefaultSelection<Prisma.$InvalidTokensPayload>
/**
 * Model ResetTokens
 * 
 */
export type ResetTokens = $Result.DefaultSelection<Prisma.$ResetTokensPayload>
/**
 * Model Levels
 * 
 */
export type Levels = $Result.DefaultSelection<Prisma.$LevelsPayload>
/**
 * Model LevelRewards
 * 
 */
export type LevelRewards = $Result.DefaultSelection<Prisma.$LevelRewardsPayload>
/**
 * Model CollectionPoints
 * 
 */
export type CollectionPoints = $Result.DefaultSelection<Prisma.$CollectionPointsPayload>
/**
 * Model Recycling
 * 
 */
export type Recycling = $Result.DefaultSelection<Prisma.$RecyclingPayload>
/**
 * Model Bottles
 * 
 */
export type Bottles = $Result.DefaultSelection<Prisma.$BottlesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **Profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.ProfilesDelegate<ExtArgs>;

  /**
   * `prisma.invalidTokens`: Exposes CRUD operations for the **InvalidTokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvalidTokens
    * const invalidTokens = await prisma.invalidTokens.findMany()
    * ```
    */
  get invalidTokens(): Prisma.InvalidTokensDelegate<ExtArgs>;

  /**
   * `prisma.resetTokens`: Exposes CRUD operations for the **ResetTokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResetTokens
    * const resetTokens = await prisma.resetTokens.findMany()
    * ```
    */
  get resetTokens(): Prisma.ResetTokensDelegate<ExtArgs>;

  /**
   * `prisma.levels`: Exposes CRUD operations for the **Levels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.levels.findMany()
    * ```
    */
  get levels(): Prisma.LevelsDelegate<ExtArgs>;

  /**
   * `prisma.levelRewards`: Exposes CRUD operations for the **LevelRewards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LevelRewards
    * const levelRewards = await prisma.levelRewards.findMany()
    * ```
    */
  get levelRewards(): Prisma.LevelRewardsDelegate<ExtArgs>;

  /**
   * `prisma.collectionPoints`: Exposes CRUD operations for the **CollectionPoints** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionPoints
    * const collectionPoints = await prisma.collectionPoints.findMany()
    * ```
    */
  get collectionPoints(): Prisma.CollectionPointsDelegate<ExtArgs>;

  /**
   * `prisma.recycling`: Exposes CRUD operations for the **Recycling** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recyclings
    * const recyclings = await prisma.recycling.findMany()
    * ```
    */
  get recycling(): Prisma.RecyclingDelegate<ExtArgs>;

  /**
   * `prisma.bottles`: Exposes CRUD operations for the **Bottles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bottles
    * const bottles = await prisma.bottles.findMany()
    * ```
    */
  get bottles(): Prisma.BottlesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Profiles: 'Profiles',
    InvalidTokens: 'InvalidTokens',
    ResetTokens: 'ResetTokens',
    Levels: 'Levels',
    LevelRewards: 'LevelRewards',
    CollectionPoints: 'CollectionPoints',
    Recycling: 'Recycling',
    Bottles: 'Bottles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'profiles' | 'invalidTokens' | 'resetTokens' | 'levels' | 'levelRewards' | 'collectionPoints' | 'recycling' | 'bottles'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Profiles: {
        payload: Prisma.$ProfilesPayload<ExtArgs>
        fields: Prisma.ProfilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          findFirst: {
            args: Prisma.ProfilesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          findMany: {
            args: Prisma.ProfilesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>[]
          }
          create: {
            args: Prisma.ProfilesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          createMany: {
            args: Prisma.ProfilesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfilesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          update: {
            args: Prisma.ProfilesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          deleteMany: {
            args: Prisma.ProfilesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfilesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          aggregate: {
            args: Prisma.ProfilesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfiles>
          }
          groupBy: {
            args: Prisma.ProfilesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfilesCountAggregateOutputType> | number
          }
        }
      }
      InvalidTokens: {
        payload: Prisma.$InvalidTokensPayload<ExtArgs>
        fields: Prisma.InvalidTokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvalidTokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvalidTokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>
          }
          findFirst: {
            args: Prisma.InvalidTokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvalidTokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>
          }
          findMany: {
            args: Prisma.InvalidTokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>[]
          }
          create: {
            args: Prisma.InvalidTokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>
          }
          createMany: {
            args: Prisma.InvalidTokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvalidTokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>
          }
          update: {
            args: Prisma.InvalidTokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>
          }
          deleteMany: {
            args: Prisma.InvalidTokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvalidTokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvalidTokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTokensPayload>
          }
          aggregate: {
            args: Prisma.InvalidTokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvalidTokens>
          }
          groupBy: {
            args: Prisma.InvalidTokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvalidTokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvalidTokensCountArgs<ExtArgs>,
            result: $Utils.Optional<InvalidTokensCountAggregateOutputType> | number
          }
        }
      }
      ResetTokens: {
        payload: Prisma.$ResetTokensPayload<ExtArgs>
        fields: Prisma.ResetTokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResetTokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResetTokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          findFirst: {
            args: Prisma.ResetTokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResetTokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          findMany: {
            args: Prisma.ResetTokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>[]
          }
          create: {
            args: Prisma.ResetTokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          createMany: {
            args: Prisma.ResetTokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResetTokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          update: {
            args: Prisma.ResetTokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          deleteMany: {
            args: Prisma.ResetTokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResetTokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResetTokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          aggregate: {
            args: Prisma.ResetTokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResetTokens>
          }
          groupBy: {
            args: Prisma.ResetTokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResetTokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResetTokensCountArgs<ExtArgs>,
            result: $Utils.Optional<ResetTokensCountAggregateOutputType> | number
          }
        }
      }
      Levels: {
        payload: Prisma.$LevelsPayload<ExtArgs>
        fields: Prisma.LevelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>
          }
          findFirst: {
            args: Prisma.LevelsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>
          }
          findMany: {
            args: Prisma.LevelsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>[]
          }
          create: {
            args: Prisma.LevelsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>
          }
          createMany: {
            args: Prisma.LevelsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LevelsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>
          }
          update: {
            args: Prisma.LevelsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>
          }
          deleteMany: {
            args: Prisma.LevelsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LevelsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LevelsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelsPayload>
          }
          aggregate: {
            args: Prisma.LevelsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLevels>
          }
          groupBy: {
            args: Prisma.LevelsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LevelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelsCountArgs<ExtArgs>,
            result: $Utils.Optional<LevelsCountAggregateOutputType> | number
          }
        }
      }
      LevelRewards: {
        payload: Prisma.$LevelRewardsPayload<ExtArgs>
        fields: Prisma.LevelRewardsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelRewardsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelRewardsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>
          }
          findFirst: {
            args: Prisma.LevelRewardsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelRewardsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>
          }
          findMany: {
            args: Prisma.LevelRewardsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>[]
          }
          create: {
            args: Prisma.LevelRewardsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>
          }
          createMany: {
            args: Prisma.LevelRewardsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LevelRewardsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>
          }
          update: {
            args: Prisma.LevelRewardsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>
          }
          deleteMany: {
            args: Prisma.LevelRewardsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LevelRewardsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LevelRewardsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LevelRewardsPayload>
          }
          aggregate: {
            args: Prisma.LevelRewardsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLevelRewards>
          }
          groupBy: {
            args: Prisma.LevelRewardsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LevelRewardsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelRewardsCountArgs<ExtArgs>,
            result: $Utils.Optional<LevelRewardsCountAggregateOutputType> | number
          }
        }
      }
      CollectionPoints: {
        payload: Prisma.$CollectionPointsPayload<ExtArgs>
        fields: Prisma.CollectionPointsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionPointsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionPointsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>
          }
          findFirst: {
            args: Prisma.CollectionPointsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionPointsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>
          }
          findMany: {
            args: Prisma.CollectionPointsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>[]
          }
          create: {
            args: Prisma.CollectionPointsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>
          }
          createMany: {
            args: Prisma.CollectionPointsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CollectionPointsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>
          }
          update: {
            args: Prisma.CollectionPointsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>
          }
          deleteMany: {
            args: Prisma.CollectionPointsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionPointsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CollectionPointsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPointsPayload>
          }
          aggregate: {
            args: Prisma.CollectionPointsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCollectionPoints>
          }
          groupBy: {
            args: Prisma.CollectionPointsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CollectionPointsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionPointsCountArgs<ExtArgs>,
            result: $Utils.Optional<CollectionPointsCountAggregateOutputType> | number
          }
        }
      }
      Recycling: {
        payload: Prisma.$RecyclingPayload<ExtArgs>
        fields: Prisma.RecyclingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecyclingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecyclingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>
          }
          findFirst: {
            args: Prisma.RecyclingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecyclingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>
          }
          findMany: {
            args: Prisma.RecyclingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>[]
          }
          create: {
            args: Prisma.RecyclingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>
          }
          createMany: {
            args: Prisma.RecyclingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecyclingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>
          }
          update: {
            args: Prisma.RecyclingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>
          }
          deleteMany: {
            args: Prisma.RecyclingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecyclingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecyclingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecyclingPayload>
          }
          aggregate: {
            args: Prisma.RecyclingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecycling>
          }
          groupBy: {
            args: Prisma.RecyclingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecyclingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecyclingCountArgs<ExtArgs>,
            result: $Utils.Optional<RecyclingCountAggregateOutputType> | number
          }
        }
      }
      Bottles: {
        payload: Prisma.$BottlesPayload<ExtArgs>
        fields: Prisma.BottlesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BottlesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BottlesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>
          }
          findFirst: {
            args: Prisma.BottlesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BottlesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>
          }
          findMany: {
            args: Prisma.BottlesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>[]
          }
          create: {
            args: Prisma.BottlesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>
          }
          createMany: {
            args: Prisma.BottlesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BottlesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>
          }
          update: {
            args: Prisma.BottlesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>
          }
          deleteMany: {
            args: Prisma.BottlesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BottlesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BottlesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BottlesPayload>
          }
          aggregate: {
            args: Prisma.BottlesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBottles>
          }
          groupBy: {
            args: Prisma.BottlesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BottlesGroupByOutputType>[]
          }
          count: {
            args: Prisma.BottlesCountArgs<ExtArgs>,
            result: $Utils.Optional<BottlesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    invalid_tokens: number
    recycling: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invalid_tokens?: boolean | UsersCountOutputTypeCountInvalid_tokensArgs
    recycling?: boolean | UsersCountOutputTypeCountRecyclingArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountInvalid_tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvalidTokensWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRecyclingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecyclingWhereInput
  }



  /**
   * Count Type ProfilesCountOutputType
   */

  export type ProfilesCountOutputType = {
    levels: number
    users: number
  }

  export type ProfilesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels?: boolean | ProfilesCountOutputTypeCountLevelsArgs
    users?: boolean | ProfilesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilesCountOutputType
     */
    select?: ProfilesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeCountLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelsWhereInput
  }


  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }



  /**
   * Count Type LevelsCountOutputType
   */

  export type LevelsCountOutputType = {
    level_rewards: number
    users: number
  }

  export type LevelsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level_rewards?: boolean | LevelsCountOutputTypeCountLevel_rewardsArgs
    users?: boolean | LevelsCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * LevelsCountOutputType without action
   */
  export type LevelsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsCountOutputType
     */
    select?: LevelsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LevelsCountOutputType without action
   */
  export type LevelsCountOutputTypeCountLevel_rewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelRewardsWhereInput
  }


  /**
   * LevelsCountOutputType without action
   */
  export type LevelsCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }



  /**
   * Count Type CollectionPointsCountOutputType
   */

  export type CollectionPointsCountOutputType = {
    recycling: number
  }

  export type CollectionPointsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recycling?: boolean | CollectionPointsCountOutputTypeCountRecyclingArgs
  }

  // Custom InputTypes

  /**
   * CollectionPointsCountOutputType without action
   */
  export type CollectionPointsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPointsCountOutputType
     */
    select?: CollectionPointsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CollectionPointsCountOutputType without action
   */
  export type CollectionPointsCountOutputTypeCountRecyclingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecyclingWhereInput
  }



  /**
   * Count Type RecyclingCountOutputType
   */

  export type RecyclingCountOutputType = {
    Bottles: number
  }

  export type RecyclingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bottles?: boolean | RecyclingCountOutputTypeCountBottlesArgs
  }

  // Custom InputTypes

  /**
   * RecyclingCountOutputType without action
   */
  export type RecyclingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecyclingCountOutputType
     */
    select?: RecyclingCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RecyclingCountOutputType without action
   */
  export type RecyclingCountOutputTypeCountBottlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BottlesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    profile_id: string | null
    level_id: string | null
    image: string | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    profile_id: string | null
    level_id: string | null
    image: string | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    profile_id: number
    level_id: number
    image: number
    name: number
    username: number
    email: number
    password: number
    created_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    profile_id?: true
    level_id?: true
    image?: true
    name?: true
    username?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    profile_id?: true
    level_id?: true
    image?: true
    name?: true
    username?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    profile_id?: true
    level_id?: true
    image?: true
    name?: true
    username?: true
    email?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    profile_id: string
    level_id: string | null
    image: string | null
    name: string
    username: string
    email: string
    password: string
    created_at: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profile_id?: boolean
    level_id?: boolean
    image?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    invalid_tokens?: boolean | Users$invalid_tokensArgs<ExtArgs>
    reset_token?: boolean | Users$reset_tokenArgs<ExtArgs>
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
    level?: boolean | Users$levelArgs<ExtArgs>
    recycling?: boolean | Users$recyclingArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    profile_id?: boolean
    level_id?: boolean
    image?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invalid_tokens?: boolean | Users$invalid_tokensArgs<ExtArgs>
    reset_token?: boolean | Users$reset_tokenArgs<ExtArgs>
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
    level?: boolean | Users$levelArgs<ExtArgs>
    recycling?: boolean | Users$recyclingArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      invalid_tokens: Prisma.$InvalidTokensPayload<ExtArgs>[]
      reset_token: Prisma.$ResetTokensPayload<ExtArgs> | null
      profile: Prisma.$ProfilesPayload<ExtArgs>
      level: Prisma.$LevelsPayload<ExtArgs> | null
      recycling: Prisma.$RecyclingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profile_id: string
      level_id: string | null
      image: string | null
      name: string
      username: string
      email: string
      password: string
      created_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    invalid_tokens<T extends Users$invalid_tokensArgs<ExtArgs> = {}>(args?: Subset<T, Users$invalid_tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'findMany'> | Null>;

    reset_token<T extends Users$reset_tokenArgs<ExtArgs> = {}>(args?: Subset<T, Users$reset_tokenArgs<ExtArgs>>): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    profile<T extends ProfilesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfilesDefaultArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    level<T extends Users$levelArgs<ExtArgs> = {}>(args?: Subset<T, Users$levelArgs<ExtArgs>>): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    recycling<T extends Users$recyclingArgs<ExtArgs> = {}>(args?: Subset<T, Users$recyclingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly profile_id: FieldRef<"Users", 'String'>
    readonly level_id: FieldRef<"Users", 'String'>
    readonly image: FieldRef<"Users", 'String'>
    readonly name: FieldRef<"Users", 'String'>
    readonly username: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly created_at: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.invalid_tokens
   */
  export type Users$invalid_tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    where?: InvalidTokensWhereInput
    orderBy?: InvalidTokensOrderByWithRelationInput | InvalidTokensOrderByWithRelationInput[]
    cursor?: InvalidTokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvalidTokensScalarFieldEnum | InvalidTokensScalarFieldEnum[]
  }


  /**
   * Users.reset_token
   */
  export type Users$reset_tokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    where?: ResetTokensWhereInput
  }


  /**
   * Users.level
   */
  export type Users$levelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    where?: LevelsWhereInput
  }


  /**
   * Users.recycling
   */
  export type Users$recyclingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    where?: RecyclingWhereInput
    orderBy?: RecyclingOrderByWithRelationInput | RecyclingOrderByWithRelationInput[]
    cursor?: RecyclingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecyclingScalarFieldEnum | RecyclingScalarFieldEnum[]
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Profiles
   */

  export type AggregateProfiles = {
    _count: ProfilesCountAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    created_at: Date | null
  }

  export type ProfilesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    created_at: Date | null
  }

  export type ProfilesCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image: number
    created_at: number
    _all: number
  }


  export type ProfilesMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    created_at?: true
  }

  export type ProfilesMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    created_at?: true
  }

  export type ProfilesCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    created_at?: true
    _all?: true
  }

  export type ProfilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to aggregate.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends ProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfiles[P]>
      : GetScalarType<T[P], AggregateProfiles[P]>
  }




  export type ProfilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilesWhereInput
    orderBy?: ProfilesOrderByWithAggregationInput | ProfilesOrderByWithAggregationInput[]
    by: ProfilesScalarFieldEnum[] | ProfilesScalarFieldEnum
    having?: ProfilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilesCountAggregateInputType | true
    _min?: ProfilesMinAggregateInputType
    _max?: ProfilesMaxAggregateInputType
  }

  export type ProfilesGroupByOutputType = {
    id: string
    name: string
    description: string
    image: string
    created_at: Date
    _count: ProfilesCountAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  type GetProfilesGroupByPayload<T extends ProfilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
        }
      >
    >


  export type ProfilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    created_at?: boolean
    levels?: boolean | Profiles$levelsArgs<ExtArgs>
    users?: boolean | Profiles$usersArgs<ExtArgs>
    _count?: boolean | ProfilesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profiles"]>

  export type ProfilesSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    created_at?: boolean
  }

  export type ProfilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels?: boolean | Profiles$levelsArgs<ExtArgs>
    users?: boolean | Profiles$usersArgs<ExtArgs>
    _count?: boolean | ProfilesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProfilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profiles"
    objects: {
      levels: Prisma.$LevelsPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      image: string
      created_at: Date
    }, ExtArgs["result"]["profiles"]>
    composites: {}
  }


  type ProfilesGetPayload<S extends boolean | null | undefined | ProfilesDefaultArgs> = $Result.GetResult<Prisma.$ProfilesPayload, S>

  type ProfilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfilesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfilesCountAggregateInputType | true
    }

  export interface ProfilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profiles'], meta: { name: 'Profiles' } }
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {ProfilesFindUniqueArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfilesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Profiles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfilesFindUniqueOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfilesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfilesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindFirstArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Profiles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfilesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilesWithIdOnly = await prisma.profiles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfilesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Profiles.
     * @param {ProfilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
    **/
    create<T extends ProfilesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesCreateArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Profiles.
     *     @param {ProfilesCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profiles = await prisma.profiles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfilesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profiles.
     * @param {ProfilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
    **/
    delete<T extends ProfilesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesDeleteArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Profiles.
     * @param {ProfilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfilesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesUpdateArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfilesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfilesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profiles.
     * @param {ProfilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
    **/
    upsert<T extends ProfilesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesUpsertArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfilesCountArgs>(
      args?: Subset<T, ProfilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilesAggregateArgs>(args: Subset<T, ProfilesAggregateArgs>): Prisma.PrismaPromise<GetProfilesAggregateType<T>>

    /**
     * Group by Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilesGroupByArgs['orderBy'] }
        : { orderBy?: ProfilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profiles model
   */
  readonly fields: ProfilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    levels<T extends Profiles$levelsArgs<ExtArgs> = {}>(args?: Subset<T, Profiles$levelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Profiles$usersArgs<ExtArgs> = {}>(args?: Subset<T, Profiles$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Profiles model
   */ 
  interface ProfilesFieldRefs {
    readonly id: FieldRef<"Profiles", 'String'>
    readonly name: FieldRef<"Profiles", 'String'>
    readonly description: FieldRef<"Profiles", 'String'>
    readonly image: FieldRef<"Profiles", 'String'>
    readonly created_at: FieldRef<"Profiles", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Profiles findUnique
   */
  export type ProfilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles findUniqueOrThrow
   */
  export type ProfilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles findFirst
   */
  export type ProfilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }


  /**
   * Profiles findFirstOrThrow
   */
  export type ProfilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }


  /**
   * Profiles findMany
   */
  export type ProfilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }


  /**
   * Profiles create
   */
  export type ProfilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The data needed to create a Profiles.
     */
    data: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
  }


  /**
   * Profiles createMany
   */
  export type ProfilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfilesCreateManyInput | ProfilesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Profiles update
   */
  export type ProfilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The data needed to update a Profiles.
     */
    data: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
    /**
     * Choose, which Profiles to update.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles updateMany
   */
  export type ProfilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfilesWhereInput
  }


  /**
   * Profiles upsert
   */
  export type ProfilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The filter to search for the Profiles to update in case it exists.
     */
    where: ProfilesWhereUniqueInput
    /**
     * In case the Profiles found by the `where` argument doesn't exist, create a new Profiles with this data.
     */
    create: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
    /**
     * In case the Profiles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
  }


  /**
   * Profiles delete
   */
  export type ProfilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter which Profiles to delete.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles deleteMany
   */
  export type ProfilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfilesWhereInput
  }


  /**
   * Profiles.levels
   */
  export type Profiles$levelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    where?: LevelsWhereInput
    orderBy?: LevelsOrderByWithRelationInput | LevelsOrderByWithRelationInput[]
    cursor?: LevelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }


  /**
   * Profiles.users
   */
  export type Profiles$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Profiles without action
   */
  export type ProfilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
  }



  /**
   * Model InvalidTokens
   */

  export type AggregateInvalidTokens = {
    _count: InvalidTokensCountAggregateOutputType | null
    _avg: InvalidTokensAvgAggregateOutputType | null
    _sum: InvalidTokensSumAggregateOutputType | null
    _min: InvalidTokensMinAggregateOutputType | null
    _max: InvalidTokensMaxAggregateOutputType | null
  }

  export type InvalidTokensAvgAggregateOutputType = {
    id: number | null
  }

  export type InvalidTokensSumAggregateOutputType = {
    id: number | null
  }

  export type InvalidTokensMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    token: string | null
    invalidated_at: Date | null
  }

  export type InvalidTokensMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    token: string | null
    invalidated_at: Date | null
  }

  export type InvalidTokensCountAggregateOutputType = {
    id: number
    user_id: number
    token: number
    invalidated_at: number
    _all: number
  }


  export type InvalidTokensAvgAggregateInputType = {
    id?: true
  }

  export type InvalidTokensSumAggregateInputType = {
    id?: true
  }

  export type InvalidTokensMinAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    invalidated_at?: true
  }

  export type InvalidTokensMaxAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    invalidated_at?: true
  }

  export type InvalidTokensCountAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    invalidated_at?: true
    _all?: true
  }

  export type InvalidTokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvalidTokens to aggregate.
     */
    where?: InvalidTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTokens to fetch.
     */
    orderBy?: InvalidTokensOrderByWithRelationInput | InvalidTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvalidTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvalidTokens
    **/
    _count?: true | InvalidTokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvalidTokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvalidTokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvalidTokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvalidTokensMaxAggregateInputType
  }

  export type GetInvalidTokensAggregateType<T extends InvalidTokensAggregateArgs> = {
        [P in keyof T & keyof AggregateInvalidTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvalidTokens[P]>
      : GetScalarType<T[P], AggregateInvalidTokens[P]>
  }




  export type InvalidTokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvalidTokensWhereInput
    orderBy?: InvalidTokensOrderByWithAggregationInput | InvalidTokensOrderByWithAggregationInput[]
    by: InvalidTokensScalarFieldEnum[] | InvalidTokensScalarFieldEnum
    having?: InvalidTokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvalidTokensCountAggregateInputType | true
    _avg?: InvalidTokensAvgAggregateInputType
    _sum?: InvalidTokensSumAggregateInputType
    _min?: InvalidTokensMinAggregateInputType
    _max?: InvalidTokensMaxAggregateInputType
  }

  export type InvalidTokensGroupByOutputType = {
    id: number
    user_id: string
    token: string
    invalidated_at: Date
    _count: InvalidTokensCountAggregateOutputType | null
    _avg: InvalidTokensAvgAggregateOutputType | null
    _sum: InvalidTokensSumAggregateOutputType | null
    _min: InvalidTokensMinAggregateOutputType | null
    _max: InvalidTokensMaxAggregateOutputType | null
  }

  type GetInvalidTokensGroupByPayload<T extends InvalidTokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvalidTokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvalidTokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvalidTokensGroupByOutputType[P]>
            : GetScalarType<T[P], InvalidTokensGroupByOutputType[P]>
        }
      >
    >


  export type InvalidTokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    token?: boolean
    invalidated_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invalidTokens"]>

  export type InvalidTokensSelectScalar = {
    id?: boolean
    user_id?: boolean
    token?: boolean
    invalidated_at?: boolean
  }

  export type InvalidTokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $InvalidTokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvalidTokens"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      token: string
      invalidated_at: Date
    }, ExtArgs["result"]["invalidTokens"]>
    composites: {}
  }


  type InvalidTokensGetPayload<S extends boolean | null | undefined | InvalidTokensDefaultArgs> = $Result.GetResult<Prisma.$InvalidTokensPayload, S>

  type InvalidTokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvalidTokensFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: InvalidTokensCountAggregateInputType | true
    }

  export interface InvalidTokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvalidTokens'], meta: { name: 'InvalidTokens' } }
    /**
     * Find zero or one InvalidTokens that matches the filter.
     * @param {InvalidTokensFindUniqueArgs} args - Arguments to find a InvalidTokens
     * @example
     * // Get one InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvalidTokensFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTokensFindUniqueArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InvalidTokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvalidTokensFindUniqueOrThrowArgs} args - Arguments to find a InvalidTokens
     * @example
     * // Get one InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvalidTokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InvalidTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensFindFirstArgs} args - Arguments to find a InvalidTokens
     * @example
     * // Get one InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvalidTokensFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTokensFindFirstArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InvalidTokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensFindFirstOrThrowArgs} args - Arguments to find a InvalidTokens
     * @example
     * // Get one InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvalidTokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InvalidTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.findMany()
     * 
     * // Get first 10 InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invalidTokensWithIdOnly = await prisma.invalidTokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvalidTokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InvalidTokens.
     * @param {InvalidTokensCreateArgs} args - Arguments to create a InvalidTokens.
     * @example
     * // Create one InvalidTokens
     * const InvalidTokens = await prisma.invalidTokens.create({
     *   data: {
     *     // ... data to create a InvalidTokens
     *   }
     * })
     * 
    **/
    create<T extends InvalidTokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTokensCreateArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InvalidTokens.
     *     @param {InvalidTokensCreateManyArgs} args - Arguments to create many InvalidTokens.
     *     @example
     *     // Create many InvalidTokens
     *     const invalidTokens = await prisma.invalidTokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvalidTokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InvalidTokens.
     * @param {InvalidTokensDeleteArgs} args - Arguments to delete one InvalidTokens.
     * @example
     * // Delete one InvalidTokens
     * const InvalidTokens = await prisma.invalidTokens.delete({
     *   where: {
     *     // ... filter to delete one InvalidTokens
     *   }
     * })
     * 
    **/
    delete<T extends InvalidTokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTokensDeleteArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InvalidTokens.
     * @param {InvalidTokensUpdateArgs} args - Arguments to update one InvalidTokens.
     * @example
     * // Update one InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvalidTokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTokensUpdateArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InvalidTokens.
     * @param {InvalidTokensDeleteManyArgs} args - Arguments to filter InvalidTokens to delete.
     * @example
     * // Delete a few InvalidTokens
     * const { count } = await prisma.invalidTokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvalidTokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvalidTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvalidTokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvalidTokens.
     * @param {InvalidTokensUpsertArgs} args - Arguments to update or create a InvalidTokens.
     * @example
     * // Update or create a InvalidTokens
     * const invalidTokens = await prisma.invalidTokens.upsert({
     *   create: {
     *     // ... data to create a InvalidTokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvalidTokens we want to update
     *   }
     * })
    **/
    upsert<T extends InvalidTokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTokensUpsertArgs<ExtArgs>>
    ): Prisma__InvalidTokensClient<$Result.GetResult<Prisma.$InvalidTokensPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InvalidTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensCountArgs} args - Arguments to filter InvalidTokens to count.
     * @example
     * // Count the number of InvalidTokens
     * const count = await prisma.invalidTokens.count({
     *   where: {
     *     // ... the filter for the InvalidTokens we want to count
     *   }
     * })
    **/
    count<T extends InvalidTokensCountArgs>(
      args?: Subset<T, InvalidTokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvalidTokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvalidTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvalidTokensAggregateArgs>(args: Subset<T, InvalidTokensAggregateArgs>): Prisma.PrismaPromise<GetInvalidTokensAggregateType<T>>

    /**
     * Group by InvalidTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvalidTokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvalidTokensGroupByArgs['orderBy'] }
        : { orderBy?: InvalidTokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvalidTokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvalidTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvalidTokens model
   */
  readonly fields: InvalidTokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvalidTokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvalidTokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InvalidTokens model
   */ 
  interface InvalidTokensFieldRefs {
    readonly id: FieldRef<"InvalidTokens", 'Int'>
    readonly user_id: FieldRef<"InvalidTokens", 'String'>
    readonly token: FieldRef<"InvalidTokens", 'String'>
    readonly invalidated_at: FieldRef<"InvalidTokens", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * InvalidTokens findUnique
   */
  export type InvalidTokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * Filter, which InvalidTokens to fetch.
     */
    where: InvalidTokensWhereUniqueInput
  }


  /**
   * InvalidTokens findUniqueOrThrow
   */
  export type InvalidTokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * Filter, which InvalidTokens to fetch.
     */
    where: InvalidTokensWhereUniqueInput
  }


  /**
   * InvalidTokens findFirst
   */
  export type InvalidTokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * Filter, which InvalidTokens to fetch.
     */
    where?: InvalidTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTokens to fetch.
     */
    orderBy?: InvalidTokensOrderByWithRelationInput | InvalidTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvalidTokens.
     */
    cursor?: InvalidTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvalidTokens.
     */
    distinct?: InvalidTokensScalarFieldEnum | InvalidTokensScalarFieldEnum[]
  }


  /**
   * InvalidTokens findFirstOrThrow
   */
  export type InvalidTokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * Filter, which InvalidTokens to fetch.
     */
    where?: InvalidTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTokens to fetch.
     */
    orderBy?: InvalidTokensOrderByWithRelationInput | InvalidTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvalidTokens.
     */
    cursor?: InvalidTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvalidTokens.
     */
    distinct?: InvalidTokensScalarFieldEnum | InvalidTokensScalarFieldEnum[]
  }


  /**
   * InvalidTokens findMany
   */
  export type InvalidTokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * Filter, which InvalidTokens to fetch.
     */
    where?: InvalidTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTokens to fetch.
     */
    orderBy?: InvalidTokensOrderByWithRelationInput | InvalidTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvalidTokens.
     */
    cursor?: InvalidTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTokens.
     */
    skip?: number
    distinct?: InvalidTokensScalarFieldEnum | InvalidTokensScalarFieldEnum[]
  }


  /**
   * InvalidTokens create
   */
  export type InvalidTokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * The data needed to create a InvalidTokens.
     */
    data: XOR<InvalidTokensCreateInput, InvalidTokensUncheckedCreateInput>
  }


  /**
   * InvalidTokens createMany
   */
  export type InvalidTokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvalidTokens.
     */
    data: InvalidTokensCreateManyInput | InvalidTokensCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InvalidTokens update
   */
  export type InvalidTokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * The data needed to update a InvalidTokens.
     */
    data: XOR<InvalidTokensUpdateInput, InvalidTokensUncheckedUpdateInput>
    /**
     * Choose, which InvalidTokens to update.
     */
    where: InvalidTokensWhereUniqueInput
  }


  /**
   * InvalidTokens updateMany
   */
  export type InvalidTokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvalidTokens.
     */
    data: XOR<InvalidTokensUpdateManyMutationInput, InvalidTokensUncheckedUpdateManyInput>
    /**
     * Filter which InvalidTokens to update
     */
    where?: InvalidTokensWhereInput
  }


  /**
   * InvalidTokens upsert
   */
  export type InvalidTokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * The filter to search for the InvalidTokens to update in case it exists.
     */
    where: InvalidTokensWhereUniqueInput
    /**
     * In case the InvalidTokens found by the `where` argument doesn't exist, create a new InvalidTokens with this data.
     */
    create: XOR<InvalidTokensCreateInput, InvalidTokensUncheckedCreateInput>
    /**
     * In case the InvalidTokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvalidTokensUpdateInput, InvalidTokensUncheckedUpdateInput>
  }


  /**
   * InvalidTokens delete
   */
  export type InvalidTokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
    /**
     * Filter which InvalidTokens to delete.
     */
    where: InvalidTokensWhereUniqueInput
  }


  /**
   * InvalidTokens deleteMany
   */
  export type InvalidTokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvalidTokens to delete
     */
    where?: InvalidTokensWhereInput
  }


  /**
   * InvalidTokens without action
   */
  export type InvalidTokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTokens
     */
    select?: InvalidTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvalidTokensInclude<ExtArgs> | null
  }



  /**
   * Model ResetTokens
   */

  export type AggregateResetTokens = {
    _count: ResetTokensCountAggregateOutputType | null
    _avg: ResetTokensAvgAggregateOutputType | null
    _sum: ResetTokensSumAggregateOutputType | null
    _min: ResetTokensMinAggregateOutputType | null
    _max: ResetTokensMaxAggregateOutputType | null
  }

  export type ResetTokensAvgAggregateOutputType = {
    id: number | null
  }

  export type ResetTokensSumAggregateOutputType = {
    id: number | null
  }

  export type ResetTokensMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    token: string | null
    expires_at: Date | null
  }

  export type ResetTokensMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    token: string | null
    expires_at: Date | null
  }

  export type ResetTokensCountAggregateOutputType = {
    id: number
    user_id: number
    token: number
    expires_at: number
    _all: number
  }


  export type ResetTokensAvgAggregateInputType = {
    id?: true
  }

  export type ResetTokensSumAggregateInputType = {
    id?: true
  }

  export type ResetTokensMinAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    expires_at?: true
  }

  export type ResetTokensMaxAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    expires_at?: true
  }

  export type ResetTokensCountAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    expires_at?: true
    _all?: true
  }

  export type ResetTokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResetTokens to aggregate.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResetTokens
    **/
    _count?: true | ResetTokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResetTokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResetTokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResetTokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResetTokensMaxAggregateInputType
  }

  export type GetResetTokensAggregateType<T extends ResetTokensAggregateArgs> = {
        [P in keyof T & keyof AggregateResetTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResetTokens[P]>
      : GetScalarType<T[P], AggregateResetTokens[P]>
  }




  export type ResetTokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResetTokensWhereInput
    orderBy?: ResetTokensOrderByWithAggregationInput | ResetTokensOrderByWithAggregationInput[]
    by: ResetTokensScalarFieldEnum[] | ResetTokensScalarFieldEnum
    having?: ResetTokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResetTokensCountAggregateInputType | true
    _avg?: ResetTokensAvgAggregateInputType
    _sum?: ResetTokensSumAggregateInputType
    _min?: ResetTokensMinAggregateInputType
    _max?: ResetTokensMaxAggregateInputType
  }

  export type ResetTokensGroupByOutputType = {
    id: number
    user_id: string
    token: string
    expires_at: Date
    _count: ResetTokensCountAggregateOutputType | null
    _avg: ResetTokensAvgAggregateOutputType | null
    _sum: ResetTokensSumAggregateOutputType | null
    _min: ResetTokensMinAggregateOutputType | null
    _max: ResetTokensMaxAggregateOutputType | null
  }

  type GetResetTokensGroupByPayload<T extends ResetTokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResetTokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResetTokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResetTokensGroupByOutputType[P]>
            : GetScalarType<T[P], ResetTokensGroupByOutputType[P]>
        }
      >
    >


  export type ResetTokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    token?: boolean
    expires_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resetTokens"]>

  export type ResetTokensSelectScalar = {
    id?: boolean
    user_id?: boolean
    token?: boolean
    expires_at?: boolean
  }

  export type ResetTokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $ResetTokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResetTokens"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      token: string
      expires_at: Date
    }, ExtArgs["result"]["resetTokens"]>
    composites: {}
  }


  type ResetTokensGetPayload<S extends boolean | null | undefined | ResetTokensDefaultArgs> = $Result.GetResult<Prisma.$ResetTokensPayload, S>

  type ResetTokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResetTokensFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ResetTokensCountAggregateInputType | true
    }

  export interface ResetTokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResetTokens'], meta: { name: 'ResetTokens' } }
    /**
     * Find zero or one ResetTokens that matches the filter.
     * @param {ResetTokensFindUniqueArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResetTokensFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensFindUniqueArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ResetTokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResetTokensFindUniqueOrThrowArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResetTokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensFindFirstArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResetTokensFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindFirstArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ResetTokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensFindFirstOrThrowArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResetTokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResetTokens
     * const resetTokens = await prisma.resetTokens.findMany()
     * 
     * // Get first 10 ResetTokens
     * const resetTokens = await prisma.resetTokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resetTokensWithIdOnly = await prisma.resetTokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResetTokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ResetTokens.
     * @param {ResetTokensCreateArgs} args - Arguments to create a ResetTokens.
     * @example
     * // Create one ResetTokens
     * const ResetTokens = await prisma.resetTokens.create({
     *   data: {
     *     // ... data to create a ResetTokens
     *   }
     * })
     * 
    **/
    create<T extends ResetTokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensCreateArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ResetTokens.
     *     @param {ResetTokensCreateManyArgs} args - Arguments to create many ResetTokens.
     *     @example
     *     // Create many ResetTokens
     *     const resetTokens = await prisma.resetTokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResetTokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ResetTokens.
     * @param {ResetTokensDeleteArgs} args - Arguments to delete one ResetTokens.
     * @example
     * // Delete one ResetTokens
     * const ResetTokens = await prisma.resetTokens.delete({
     *   where: {
     *     // ... filter to delete one ResetTokens
     *   }
     * })
     * 
    **/
    delete<T extends ResetTokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensDeleteArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ResetTokens.
     * @param {ResetTokensUpdateArgs} args - Arguments to update one ResetTokens.
     * @example
     * // Update one ResetTokens
     * const resetTokens = await prisma.resetTokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResetTokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensUpdateArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ResetTokens.
     * @param {ResetTokensDeleteManyArgs} args - Arguments to filter ResetTokens to delete.
     * @example
     * // Delete a few ResetTokens
     * const { count } = await prisma.resetTokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResetTokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResetTokens
     * const resetTokens = await prisma.resetTokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResetTokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResetTokens.
     * @param {ResetTokensUpsertArgs} args - Arguments to update or create a ResetTokens.
     * @example
     * // Update or create a ResetTokens
     * const resetTokens = await prisma.resetTokens.upsert({
     *   create: {
     *     // ... data to create a ResetTokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResetTokens we want to update
     *   }
     * })
    **/
    upsert<T extends ResetTokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensUpsertArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensCountArgs} args - Arguments to filter ResetTokens to count.
     * @example
     * // Count the number of ResetTokens
     * const count = await prisma.resetTokens.count({
     *   where: {
     *     // ... the filter for the ResetTokens we want to count
     *   }
     * })
    **/
    count<T extends ResetTokensCountArgs>(
      args?: Subset<T, ResetTokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResetTokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResetTokensAggregateArgs>(args: Subset<T, ResetTokensAggregateArgs>): Prisma.PrismaPromise<GetResetTokensAggregateType<T>>

    /**
     * Group by ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResetTokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResetTokensGroupByArgs['orderBy'] }
        : { orderBy?: ResetTokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResetTokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResetTokens model
   */
  readonly fields: ResetTokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResetTokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResetTokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ResetTokens model
   */ 
  interface ResetTokensFieldRefs {
    readonly id: FieldRef<"ResetTokens", 'Int'>
    readonly user_id: FieldRef<"ResetTokens", 'String'>
    readonly token: FieldRef<"ResetTokens", 'String'>
    readonly expires_at: FieldRef<"ResetTokens", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ResetTokens findUnique
   */
  export type ResetTokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where: ResetTokensWhereUniqueInput
  }


  /**
   * ResetTokens findUniqueOrThrow
   */
  export type ResetTokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where: ResetTokensWhereUniqueInput
  }


  /**
   * ResetTokens findFirst
   */
  export type ResetTokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetTokens.
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetTokens.
     */
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }


  /**
   * ResetTokens findFirstOrThrow
   */
  export type ResetTokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetTokens.
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetTokens.
     */
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }


  /**
   * ResetTokens findMany
   */
  export type ResetTokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResetTokens.
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }


  /**
   * ResetTokens create
   */
  export type ResetTokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * The data needed to create a ResetTokens.
     */
    data: XOR<ResetTokensCreateInput, ResetTokensUncheckedCreateInput>
  }


  /**
   * ResetTokens createMany
   */
  export type ResetTokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResetTokens.
     */
    data: ResetTokensCreateManyInput | ResetTokensCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ResetTokens update
   */
  export type ResetTokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * The data needed to update a ResetTokens.
     */
    data: XOR<ResetTokensUpdateInput, ResetTokensUncheckedUpdateInput>
    /**
     * Choose, which ResetTokens to update.
     */
    where: ResetTokensWhereUniqueInput
  }


  /**
   * ResetTokens updateMany
   */
  export type ResetTokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResetTokens.
     */
    data: XOR<ResetTokensUpdateManyMutationInput, ResetTokensUncheckedUpdateManyInput>
    /**
     * Filter which ResetTokens to update
     */
    where?: ResetTokensWhereInput
  }


  /**
   * ResetTokens upsert
   */
  export type ResetTokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * The filter to search for the ResetTokens to update in case it exists.
     */
    where: ResetTokensWhereUniqueInput
    /**
     * In case the ResetTokens found by the `where` argument doesn't exist, create a new ResetTokens with this data.
     */
    create: XOR<ResetTokensCreateInput, ResetTokensUncheckedCreateInput>
    /**
     * In case the ResetTokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResetTokensUpdateInput, ResetTokensUncheckedUpdateInput>
  }


  /**
   * ResetTokens delete
   */
  export type ResetTokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter which ResetTokens to delete.
     */
    where: ResetTokensWhereUniqueInput
  }


  /**
   * ResetTokens deleteMany
   */
  export type ResetTokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResetTokens to delete
     */
    where?: ResetTokensWhereInput
  }


  /**
   * ResetTokens without action
   */
  export type ResetTokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResetTokensInclude<ExtArgs> | null
  }



  /**
   * Model Levels
   */

  export type AggregateLevels = {
    _count: LevelsCountAggregateOutputType | null
    _avg: LevelsAvgAggregateOutputType | null
    _sum: LevelsSumAggregateOutputType | null
    _min: LevelsMinAggregateOutputType | null
    _max: LevelsMaxAggregateOutputType | null
  }

  export type LevelsAvgAggregateOutputType = {
    required_score: number | null
    position: number | null
  }

  export type LevelsSumAggregateOutputType = {
    required_score: number | null
    position: number | null
  }

  export type LevelsMinAggregateOutputType = {
    id: string | null
    profile_id: string | null
    name: string | null
    description: string | null
    image: string | null
    required_score: number | null
    position: number | null
    created_at: Date | null
    unlocked: boolean | null
  }

  export type LevelsMaxAggregateOutputType = {
    id: string | null
    profile_id: string | null
    name: string | null
    description: string | null
    image: string | null
    required_score: number | null
    position: number | null
    created_at: Date | null
    unlocked: boolean | null
  }

  export type LevelsCountAggregateOutputType = {
    id: number
    profile_id: number
    name: number
    description: number
    image: number
    required_score: number
    position: number
    created_at: number
    unlocked: number
    _all: number
  }


  export type LevelsAvgAggregateInputType = {
    required_score?: true
    position?: true
  }

  export type LevelsSumAggregateInputType = {
    required_score?: true
    position?: true
  }

  export type LevelsMinAggregateInputType = {
    id?: true
    profile_id?: true
    name?: true
    description?: true
    image?: true
    required_score?: true
    position?: true
    created_at?: true
    unlocked?: true
  }

  export type LevelsMaxAggregateInputType = {
    id?: true
    profile_id?: true
    name?: true
    description?: true
    image?: true
    required_score?: true
    position?: true
    created_at?: true
    unlocked?: true
  }

  export type LevelsCountAggregateInputType = {
    id?: true
    profile_id?: true
    name?: true
    description?: true
    image?: true
    required_score?: true
    position?: true
    created_at?: true
    unlocked?: true
    _all?: true
  }

  export type LevelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to aggregate.
     */
    where?: LevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelsOrderByWithRelationInput | LevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Levels
    **/
    _count?: true | LevelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LevelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LevelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelsMaxAggregateInputType
  }

  export type GetLevelsAggregateType<T extends LevelsAggregateArgs> = {
        [P in keyof T & keyof AggregateLevels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevels[P]>
      : GetScalarType<T[P], AggregateLevels[P]>
  }




  export type LevelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelsWhereInput
    orderBy?: LevelsOrderByWithAggregationInput | LevelsOrderByWithAggregationInput[]
    by: LevelsScalarFieldEnum[] | LevelsScalarFieldEnum
    having?: LevelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelsCountAggregateInputType | true
    _avg?: LevelsAvgAggregateInputType
    _sum?: LevelsSumAggregateInputType
    _min?: LevelsMinAggregateInputType
    _max?: LevelsMaxAggregateInputType
  }

  export type LevelsGroupByOutputType = {
    id: string
    profile_id: string
    name: string
    description: string
    image: string
    required_score: number
    position: number | null
    created_at: Date
    unlocked: boolean | null
    _count: LevelsCountAggregateOutputType | null
    _avg: LevelsAvgAggregateOutputType | null
    _sum: LevelsSumAggregateOutputType | null
    _min: LevelsMinAggregateOutputType | null
    _max: LevelsMaxAggregateOutputType | null
  }

  type GetLevelsGroupByPayload<T extends LevelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelsGroupByOutputType[P]>
            : GetScalarType<T[P], LevelsGroupByOutputType[P]>
        }
      >
    >


  export type LevelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profile_id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    required_score?: boolean
    position?: boolean
    created_at?: boolean
    unlocked?: boolean
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
    level_rewards?: boolean | Levels$level_rewardsArgs<ExtArgs>
    users?: boolean | Levels$usersArgs<ExtArgs>
    _count?: boolean | LevelsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levels"]>

  export type LevelsSelectScalar = {
    id?: boolean
    profile_id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    required_score?: boolean
    position?: boolean
    created_at?: boolean
    unlocked?: boolean
  }

  export type LevelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfilesDefaultArgs<ExtArgs>
    level_rewards?: boolean | Levels$level_rewardsArgs<ExtArgs>
    users?: boolean | Levels$usersArgs<ExtArgs>
    _count?: boolean | LevelsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LevelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Levels"
    objects: {
      profile: Prisma.$ProfilesPayload<ExtArgs>
      level_rewards: Prisma.$LevelRewardsPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profile_id: string
      name: string
      description: string
      image: string
      required_score: number
      position: number | null
      created_at: Date
      unlocked: boolean | null
    }, ExtArgs["result"]["levels"]>
    composites: {}
  }


  type LevelsGetPayload<S extends boolean | null | undefined | LevelsDefaultArgs> = $Result.GetResult<Prisma.$LevelsPayload, S>

  type LevelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LevelsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LevelsCountAggregateInputType | true
    }

  export interface LevelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Levels'], meta: { name: 'Levels' } }
    /**
     * Find zero or one Levels that matches the filter.
     * @param {LevelsFindUniqueArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LevelsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LevelsFindUniqueArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Levels that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LevelsFindUniqueOrThrowArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LevelsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsFindFirstArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LevelsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelsFindFirstArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Levels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsFindFirstOrThrowArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LevelsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.levels.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.levels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelsWithIdOnly = await prisma.levels.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LevelsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Levels.
     * @param {LevelsCreateArgs} args - Arguments to create a Levels.
     * @example
     * // Create one Levels
     * const Levels = await prisma.levels.create({
     *   data: {
     *     // ... data to create a Levels
     *   }
     * })
     * 
    **/
    create<T extends LevelsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LevelsCreateArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Levels.
     *     @param {LevelsCreateManyArgs} args - Arguments to create many Levels.
     *     @example
     *     // Create many Levels
     *     const levels = await prisma.levels.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LevelsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Levels.
     * @param {LevelsDeleteArgs} args - Arguments to delete one Levels.
     * @example
     * // Delete one Levels
     * const Levels = await prisma.levels.delete({
     *   where: {
     *     // ... filter to delete one Levels
     *   }
     * })
     * 
    **/
    delete<T extends LevelsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LevelsDeleteArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Levels.
     * @param {LevelsUpdateArgs} args - Arguments to update one Levels.
     * @example
     * // Update one Levels
     * const levels = await prisma.levels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LevelsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LevelsUpdateArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Levels.
     * @param {LevelsDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.levels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LevelsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const levels = await prisma.levels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LevelsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LevelsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Levels.
     * @param {LevelsUpsertArgs} args - Arguments to update or create a Levels.
     * @example
     * // Update or create a Levels
     * const levels = await prisma.levels.upsert({
     *   create: {
     *     // ... data to create a Levels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Levels we want to update
     *   }
     * })
    **/
    upsert<T extends LevelsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LevelsUpsertArgs<ExtArgs>>
    ): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.levels.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends LevelsCountArgs>(
      args?: Subset<T, LevelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelsAggregateArgs>(args: Subset<T, LevelsAggregateArgs>): Prisma.PrismaPromise<GetLevelsAggregateType<T>>

    /**
     * Group by Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelsGroupByArgs['orderBy'] }
        : { orderBy?: LevelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Levels model
   */
  readonly fields: LevelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Levels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    profile<T extends ProfilesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfilesDefaultArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    level_rewards<T extends Levels$level_rewardsArgs<ExtArgs> = {}>(args?: Subset<T, Levels$level_rewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Levels$usersArgs<ExtArgs> = {}>(args?: Subset<T, Levels$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Levels model
   */ 
  interface LevelsFieldRefs {
    readonly id: FieldRef<"Levels", 'String'>
    readonly profile_id: FieldRef<"Levels", 'String'>
    readonly name: FieldRef<"Levels", 'String'>
    readonly description: FieldRef<"Levels", 'String'>
    readonly image: FieldRef<"Levels", 'String'>
    readonly required_score: FieldRef<"Levels", 'Int'>
    readonly position: FieldRef<"Levels", 'Int'>
    readonly created_at: FieldRef<"Levels", 'DateTime'>
    readonly unlocked: FieldRef<"Levels", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Levels findUnique
   */
  export type LevelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where: LevelsWhereUniqueInput
  }


  /**
   * Levels findUniqueOrThrow
   */
  export type LevelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where: LevelsWhereUniqueInput
  }


  /**
   * Levels findFirst
   */
  export type LevelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelsOrderByWithRelationInput | LevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }


  /**
   * Levels findFirstOrThrow
   */
  export type LevelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelsOrderByWithRelationInput | LevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }


  /**
   * Levels findMany
   */
  export type LevelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelsOrderByWithRelationInput | LevelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Levels.
     */
    cursor?: LevelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }


  /**
   * Levels create
   */
  export type LevelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * The data needed to create a Levels.
     */
    data: XOR<LevelsCreateInput, LevelsUncheckedCreateInput>
  }


  /**
   * Levels createMany
   */
  export type LevelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Levels.
     */
    data: LevelsCreateManyInput | LevelsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Levels update
   */
  export type LevelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * The data needed to update a Levels.
     */
    data: XOR<LevelsUpdateInput, LevelsUncheckedUpdateInput>
    /**
     * Choose, which Levels to update.
     */
    where: LevelsWhereUniqueInput
  }


  /**
   * Levels updateMany
   */
  export type LevelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelsUpdateManyMutationInput, LevelsUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelsWhereInput
  }


  /**
   * Levels upsert
   */
  export type LevelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * The filter to search for the Levels to update in case it exists.
     */
    where: LevelsWhereUniqueInput
    /**
     * In case the Levels found by the `where` argument doesn't exist, create a new Levels with this data.
     */
    create: XOR<LevelsCreateInput, LevelsUncheckedCreateInput>
    /**
     * In case the Levels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelsUpdateInput, LevelsUncheckedUpdateInput>
  }


  /**
   * Levels delete
   */
  export type LevelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
    /**
     * Filter which Levels to delete.
     */
    where: LevelsWhereUniqueInput
  }


  /**
   * Levels deleteMany
   */
  export type LevelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to delete
     */
    where?: LevelsWhereInput
  }


  /**
   * Levels.level_rewards
   */
  export type Levels$level_rewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    where?: LevelRewardsWhereInput
    orderBy?: LevelRewardsOrderByWithRelationInput | LevelRewardsOrderByWithRelationInput[]
    cursor?: LevelRewardsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LevelRewardsScalarFieldEnum | LevelRewardsScalarFieldEnum[]
  }


  /**
   * Levels.users
   */
  export type Levels$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Levels without action
   */
  export type LevelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Levels
     */
    select?: LevelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelsInclude<ExtArgs> | null
  }



  /**
   * Model LevelRewards
   */

  export type AggregateLevelRewards = {
    _count: LevelRewardsCountAggregateOutputType | null
    _min: LevelRewardsMinAggregateOutputType | null
    _max: LevelRewardsMaxAggregateOutputType | null
  }

  export type LevelRewardsMinAggregateOutputType = {
    id: string | null
    level_id: string | null
    name: string | null
    description: string | null
    image: string | null
    unlocked_at: Date | null
  }

  export type LevelRewardsMaxAggregateOutputType = {
    id: string | null
    level_id: string | null
    name: string | null
    description: string | null
    image: string | null
    unlocked_at: Date | null
  }

  export type LevelRewardsCountAggregateOutputType = {
    id: number
    level_id: number
    name: number
    description: number
    image: number
    unlocked_at: number
    _all: number
  }


  export type LevelRewardsMinAggregateInputType = {
    id?: true
    level_id?: true
    name?: true
    description?: true
    image?: true
    unlocked_at?: true
  }

  export type LevelRewardsMaxAggregateInputType = {
    id?: true
    level_id?: true
    name?: true
    description?: true
    image?: true
    unlocked_at?: true
  }

  export type LevelRewardsCountAggregateInputType = {
    id?: true
    level_id?: true
    name?: true
    description?: true
    image?: true
    unlocked_at?: true
    _all?: true
  }

  export type LevelRewardsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelRewards to aggregate.
     */
    where?: LevelRewardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelRewards to fetch.
     */
    orderBy?: LevelRewardsOrderByWithRelationInput | LevelRewardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelRewardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LevelRewards
    **/
    _count?: true | LevelRewardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelRewardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelRewardsMaxAggregateInputType
  }

  export type GetLevelRewardsAggregateType<T extends LevelRewardsAggregateArgs> = {
        [P in keyof T & keyof AggregateLevelRewards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevelRewards[P]>
      : GetScalarType<T[P], AggregateLevelRewards[P]>
  }




  export type LevelRewardsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelRewardsWhereInput
    orderBy?: LevelRewardsOrderByWithAggregationInput | LevelRewardsOrderByWithAggregationInput[]
    by: LevelRewardsScalarFieldEnum[] | LevelRewardsScalarFieldEnum
    having?: LevelRewardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelRewardsCountAggregateInputType | true
    _min?: LevelRewardsMinAggregateInputType
    _max?: LevelRewardsMaxAggregateInputType
  }

  export type LevelRewardsGroupByOutputType = {
    id: string
    level_id: string
    name: string
    description: string
    image: string
    unlocked_at: Date | null
    _count: LevelRewardsCountAggregateOutputType | null
    _min: LevelRewardsMinAggregateOutputType | null
    _max: LevelRewardsMaxAggregateOutputType | null
  }

  type GetLevelRewardsGroupByPayload<T extends LevelRewardsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelRewardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelRewardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelRewardsGroupByOutputType[P]>
            : GetScalarType<T[P], LevelRewardsGroupByOutputType[P]>
        }
      >
    >


  export type LevelRewardsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level_id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    unlocked_at?: boolean
    level?: boolean | LevelsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levelRewards"]>

  export type LevelRewardsSelectScalar = {
    id?: boolean
    level_id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    unlocked_at?: boolean
  }

  export type LevelRewardsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelsDefaultArgs<ExtArgs>
  }


  export type $LevelRewardsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LevelRewards"
    objects: {
      level: Prisma.$LevelsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      level_id: string
      name: string
      description: string
      image: string
      unlocked_at: Date | null
    }, ExtArgs["result"]["levelRewards"]>
    composites: {}
  }


  type LevelRewardsGetPayload<S extends boolean | null | undefined | LevelRewardsDefaultArgs> = $Result.GetResult<Prisma.$LevelRewardsPayload, S>

  type LevelRewardsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LevelRewardsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LevelRewardsCountAggregateInputType | true
    }

  export interface LevelRewardsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LevelRewards'], meta: { name: 'LevelRewards' } }
    /**
     * Find zero or one LevelRewards that matches the filter.
     * @param {LevelRewardsFindUniqueArgs} args - Arguments to find a LevelRewards
     * @example
     * // Get one LevelRewards
     * const levelRewards = await prisma.levelRewards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LevelRewardsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LevelRewardsFindUniqueArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LevelRewards that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LevelRewardsFindUniqueOrThrowArgs} args - Arguments to find a LevelRewards
     * @example
     * // Get one LevelRewards
     * const levelRewards = await prisma.levelRewards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LevelRewardsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelRewardsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LevelRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsFindFirstArgs} args - Arguments to find a LevelRewards
     * @example
     * // Get one LevelRewards
     * const levelRewards = await prisma.levelRewards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LevelRewardsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelRewardsFindFirstArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LevelRewards that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsFindFirstOrThrowArgs} args - Arguments to find a LevelRewards
     * @example
     * // Get one LevelRewards
     * const levelRewards = await prisma.levelRewards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LevelRewardsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelRewardsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LevelRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LevelRewards
     * const levelRewards = await prisma.levelRewards.findMany()
     * 
     * // Get first 10 LevelRewards
     * const levelRewards = await prisma.levelRewards.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelRewardsWithIdOnly = await prisma.levelRewards.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LevelRewardsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelRewardsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LevelRewards.
     * @param {LevelRewardsCreateArgs} args - Arguments to create a LevelRewards.
     * @example
     * // Create one LevelRewards
     * const LevelRewards = await prisma.levelRewards.create({
     *   data: {
     *     // ... data to create a LevelRewards
     *   }
     * })
     * 
    **/
    create<T extends LevelRewardsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LevelRewardsCreateArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LevelRewards.
     *     @param {LevelRewardsCreateManyArgs} args - Arguments to create many LevelRewards.
     *     @example
     *     // Create many LevelRewards
     *     const levelRewards = await prisma.levelRewards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LevelRewardsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelRewardsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LevelRewards.
     * @param {LevelRewardsDeleteArgs} args - Arguments to delete one LevelRewards.
     * @example
     * // Delete one LevelRewards
     * const LevelRewards = await prisma.levelRewards.delete({
     *   where: {
     *     // ... filter to delete one LevelRewards
     *   }
     * })
     * 
    **/
    delete<T extends LevelRewardsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LevelRewardsDeleteArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LevelRewards.
     * @param {LevelRewardsUpdateArgs} args - Arguments to update one LevelRewards.
     * @example
     * // Update one LevelRewards
     * const levelRewards = await prisma.levelRewards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LevelRewardsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LevelRewardsUpdateArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LevelRewards.
     * @param {LevelRewardsDeleteManyArgs} args - Arguments to filter LevelRewards to delete.
     * @example
     * // Delete a few LevelRewards
     * const { count } = await prisma.levelRewards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LevelRewardsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LevelRewardsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LevelRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LevelRewards
     * const levelRewards = await prisma.levelRewards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LevelRewardsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LevelRewardsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LevelRewards.
     * @param {LevelRewardsUpsertArgs} args - Arguments to update or create a LevelRewards.
     * @example
     * // Update or create a LevelRewards
     * const levelRewards = await prisma.levelRewards.upsert({
     *   create: {
     *     // ... data to create a LevelRewards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LevelRewards we want to update
     *   }
     * })
    **/
    upsert<T extends LevelRewardsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LevelRewardsUpsertArgs<ExtArgs>>
    ): Prisma__LevelRewardsClient<$Result.GetResult<Prisma.$LevelRewardsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LevelRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsCountArgs} args - Arguments to filter LevelRewards to count.
     * @example
     * // Count the number of LevelRewards
     * const count = await prisma.levelRewards.count({
     *   where: {
     *     // ... the filter for the LevelRewards we want to count
     *   }
     * })
    **/
    count<T extends LevelRewardsCountArgs>(
      args?: Subset<T, LevelRewardsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelRewardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LevelRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelRewardsAggregateArgs>(args: Subset<T, LevelRewardsAggregateArgs>): Prisma.PrismaPromise<GetLevelRewardsAggregateType<T>>

    /**
     * Group by LevelRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelRewardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelRewardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelRewardsGroupByArgs['orderBy'] }
        : { orderBy?: LevelRewardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelRewardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelRewardsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LevelRewards model
   */
  readonly fields: LevelRewardsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LevelRewards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelRewardsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    level<T extends LevelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelsDefaultArgs<ExtArgs>>): Prisma__LevelsClient<$Result.GetResult<Prisma.$LevelsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LevelRewards model
   */ 
  interface LevelRewardsFieldRefs {
    readonly id: FieldRef<"LevelRewards", 'String'>
    readonly level_id: FieldRef<"LevelRewards", 'String'>
    readonly name: FieldRef<"LevelRewards", 'String'>
    readonly description: FieldRef<"LevelRewards", 'String'>
    readonly image: FieldRef<"LevelRewards", 'String'>
    readonly unlocked_at: FieldRef<"LevelRewards", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * LevelRewards findUnique
   */
  export type LevelRewardsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * Filter, which LevelRewards to fetch.
     */
    where: LevelRewardsWhereUniqueInput
  }


  /**
   * LevelRewards findUniqueOrThrow
   */
  export type LevelRewardsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * Filter, which LevelRewards to fetch.
     */
    where: LevelRewardsWhereUniqueInput
  }


  /**
   * LevelRewards findFirst
   */
  export type LevelRewardsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * Filter, which LevelRewards to fetch.
     */
    where?: LevelRewardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelRewards to fetch.
     */
    orderBy?: LevelRewardsOrderByWithRelationInput | LevelRewardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelRewards.
     */
    cursor?: LevelRewardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelRewards.
     */
    distinct?: LevelRewardsScalarFieldEnum | LevelRewardsScalarFieldEnum[]
  }


  /**
   * LevelRewards findFirstOrThrow
   */
  export type LevelRewardsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * Filter, which LevelRewards to fetch.
     */
    where?: LevelRewardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelRewards to fetch.
     */
    orderBy?: LevelRewardsOrderByWithRelationInput | LevelRewardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LevelRewards.
     */
    cursor?: LevelRewardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LevelRewards.
     */
    distinct?: LevelRewardsScalarFieldEnum | LevelRewardsScalarFieldEnum[]
  }


  /**
   * LevelRewards findMany
   */
  export type LevelRewardsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * Filter, which LevelRewards to fetch.
     */
    where?: LevelRewardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LevelRewards to fetch.
     */
    orderBy?: LevelRewardsOrderByWithRelationInput | LevelRewardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LevelRewards.
     */
    cursor?: LevelRewardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LevelRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LevelRewards.
     */
    skip?: number
    distinct?: LevelRewardsScalarFieldEnum | LevelRewardsScalarFieldEnum[]
  }


  /**
   * LevelRewards create
   */
  export type LevelRewardsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * The data needed to create a LevelRewards.
     */
    data: XOR<LevelRewardsCreateInput, LevelRewardsUncheckedCreateInput>
  }


  /**
   * LevelRewards createMany
   */
  export type LevelRewardsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LevelRewards.
     */
    data: LevelRewardsCreateManyInput | LevelRewardsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LevelRewards update
   */
  export type LevelRewardsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * The data needed to update a LevelRewards.
     */
    data: XOR<LevelRewardsUpdateInput, LevelRewardsUncheckedUpdateInput>
    /**
     * Choose, which LevelRewards to update.
     */
    where: LevelRewardsWhereUniqueInput
  }


  /**
   * LevelRewards updateMany
   */
  export type LevelRewardsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LevelRewards.
     */
    data: XOR<LevelRewardsUpdateManyMutationInput, LevelRewardsUncheckedUpdateManyInput>
    /**
     * Filter which LevelRewards to update
     */
    where?: LevelRewardsWhereInput
  }


  /**
   * LevelRewards upsert
   */
  export type LevelRewardsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * The filter to search for the LevelRewards to update in case it exists.
     */
    where: LevelRewardsWhereUniqueInput
    /**
     * In case the LevelRewards found by the `where` argument doesn't exist, create a new LevelRewards with this data.
     */
    create: XOR<LevelRewardsCreateInput, LevelRewardsUncheckedCreateInput>
    /**
     * In case the LevelRewards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelRewardsUpdateInput, LevelRewardsUncheckedUpdateInput>
  }


  /**
   * LevelRewards delete
   */
  export type LevelRewardsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
    /**
     * Filter which LevelRewards to delete.
     */
    where: LevelRewardsWhereUniqueInput
  }


  /**
   * LevelRewards deleteMany
   */
  export type LevelRewardsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LevelRewards to delete
     */
    where?: LevelRewardsWhereInput
  }


  /**
   * LevelRewards without action
   */
  export type LevelRewardsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelRewards
     */
    select?: LevelRewardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LevelRewardsInclude<ExtArgs> | null
  }



  /**
   * Model CollectionPoints
   */

  export type AggregateCollectionPoints = {
    _count: CollectionPointsCountAggregateOutputType | null
    _avg: CollectionPointsAvgAggregateOutputType | null
    _sum: CollectionPointsSumAggregateOutputType | null
    _min: CollectionPointsMinAggregateOutputType | null
    _max: CollectionPointsMaxAggregateOutputType | null
  }

  export type CollectionPointsAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type CollectionPointsSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type CollectionPointsMinAggregateOutputType = {
    id: string | null
    mac_address: string | null
    image: string | null
    name: string | null
    email: string | null
    whatsapp: string | null
    latitude: number | null
    longitude: number | null
    city: string | null
    uf: string | null
  }

  export type CollectionPointsMaxAggregateOutputType = {
    id: string | null
    mac_address: string | null
    image: string | null
    name: string | null
    email: string | null
    whatsapp: string | null
    latitude: number | null
    longitude: number | null
    city: string | null
    uf: string | null
  }

  export type CollectionPointsCountAggregateOutputType = {
    id: number
    mac_address: number
    image: number
    name: number
    email: number
    whatsapp: number
    latitude: number
    longitude: number
    city: number
    uf: number
    _all: number
  }


  export type CollectionPointsAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type CollectionPointsSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type CollectionPointsMinAggregateInputType = {
    id?: true
    mac_address?: true
    image?: true
    name?: true
    email?: true
    whatsapp?: true
    latitude?: true
    longitude?: true
    city?: true
    uf?: true
  }

  export type CollectionPointsMaxAggregateInputType = {
    id?: true
    mac_address?: true
    image?: true
    name?: true
    email?: true
    whatsapp?: true
    latitude?: true
    longitude?: true
    city?: true
    uf?: true
  }

  export type CollectionPointsCountAggregateInputType = {
    id?: true
    mac_address?: true
    image?: true
    name?: true
    email?: true
    whatsapp?: true
    latitude?: true
    longitude?: true
    city?: true
    uf?: true
    _all?: true
  }

  export type CollectionPointsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionPoints to aggregate.
     */
    where?: CollectionPointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPoints to fetch.
     */
    orderBy?: CollectionPointsOrderByWithRelationInput | CollectionPointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionPointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollectionPoints
    **/
    _count?: true | CollectionPointsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollectionPointsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollectionPointsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionPointsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionPointsMaxAggregateInputType
  }

  export type GetCollectionPointsAggregateType<T extends CollectionPointsAggregateArgs> = {
        [P in keyof T & keyof AggregateCollectionPoints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollectionPoints[P]>
      : GetScalarType<T[P], AggregateCollectionPoints[P]>
  }




  export type CollectionPointsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionPointsWhereInput
    orderBy?: CollectionPointsOrderByWithAggregationInput | CollectionPointsOrderByWithAggregationInput[]
    by: CollectionPointsScalarFieldEnum[] | CollectionPointsScalarFieldEnum
    having?: CollectionPointsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionPointsCountAggregateInputType | true
    _avg?: CollectionPointsAvgAggregateInputType
    _sum?: CollectionPointsSumAggregateInputType
    _min?: CollectionPointsMinAggregateInputType
    _max?: CollectionPointsMaxAggregateInputType
  }

  export type CollectionPointsGroupByOutputType = {
    id: string
    mac_address: string
    image: string
    name: string
    email: string
    whatsapp: string
    latitude: number
    longitude: number
    city: string
    uf: string
    _count: CollectionPointsCountAggregateOutputType | null
    _avg: CollectionPointsAvgAggregateOutputType | null
    _sum: CollectionPointsSumAggregateOutputType | null
    _min: CollectionPointsMinAggregateOutputType | null
    _max: CollectionPointsMaxAggregateOutputType | null
  }

  type GetCollectionPointsGroupByPayload<T extends CollectionPointsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionPointsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionPointsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionPointsGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionPointsGroupByOutputType[P]>
        }
      >
    >


  export type CollectionPointsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mac_address?: boolean
    image?: boolean
    name?: boolean
    email?: boolean
    whatsapp?: boolean
    latitude?: boolean
    longitude?: boolean
    city?: boolean
    uf?: boolean
    recycling?: boolean | CollectionPoints$recyclingArgs<ExtArgs>
    _count?: boolean | CollectionPointsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionPoints"]>

  export type CollectionPointsSelectScalar = {
    id?: boolean
    mac_address?: boolean
    image?: boolean
    name?: boolean
    email?: boolean
    whatsapp?: boolean
    latitude?: boolean
    longitude?: boolean
    city?: boolean
    uf?: boolean
  }

  export type CollectionPointsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recycling?: boolean | CollectionPoints$recyclingArgs<ExtArgs>
    _count?: boolean | CollectionPointsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CollectionPointsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollectionPoints"
    objects: {
      recycling: Prisma.$RecyclingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mac_address: string
      image: string
      name: string
      email: string
      whatsapp: string
      latitude: number
      longitude: number
      city: string
      uf: string
    }, ExtArgs["result"]["collectionPoints"]>
    composites: {}
  }


  type CollectionPointsGetPayload<S extends boolean | null | undefined | CollectionPointsDefaultArgs> = $Result.GetResult<Prisma.$CollectionPointsPayload, S>

  type CollectionPointsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionPointsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CollectionPointsCountAggregateInputType | true
    }

  export interface CollectionPointsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionPoints'], meta: { name: 'CollectionPoints' } }
    /**
     * Find zero or one CollectionPoints that matches the filter.
     * @param {CollectionPointsFindUniqueArgs} args - Arguments to find a CollectionPoints
     * @example
     * // Get one CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CollectionPointsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionPointsFindUniqueArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CollectionPoints that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CollectionPointsFindUniqueOrThrowArgs} args - Arguments to find a CollectionPoints
     * @example
     * // Get one CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CollectionPointsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionPointsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CollectionPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsFindFirstArgs} args - Arguments to find a CollectionPoints
     * @example
     * // Get one CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CollectionPointsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionPointsFindFirstArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CollectionPoints that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsFindFirstOrThrowArgs} args - Arguments to find a CollectionPoints
     * @example
     * // Get one CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CollectionPointsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionPointsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CollectionPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.findMany()
     * 
     * // Get first 10 CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionPointsWithIdOnly = await prisma.collectionPoints.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CollectionPointsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionPointsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CollectionPoints.
     * @param {CollectionPointsCreateArgs} args - Arguments to create a CollectionPoints.
     * @example
     * // Create one CollectionPoints
     * const CollectionPoints = await prisma.collectionPoints.create({
     *   data: {
     *     // ... data to create a CollectionPoints
     *   }
     * })
     * 
    **/
    create<T extends CollectionPointsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionPointsCreateArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CollectionPoints.
     *     @param {CollectionPointsCreateManyArgs} args - Arguments to create many CollectionPoints.
     *     @example
     *     // Create many CollectionPoints
     *     const collectionPoints = await prisma.collectionPoints.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CollectionPointsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionPointsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CollectionPoints.
     * @param {CollectionPointsDeleteArgs} args - Arguments to delete one CollectionPoints.
     * @example
     * // Delete one CollectionPoints
     * const CollectionPoints = await prisma.collectionPoints.delete({
     *   where: {
     *     // ... filter to delete one CollectionPoints
     *   }
     * })
     * 
    **/
    delete<T extends CollectionPointsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionPointsDeleteArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CollectionPoints.
     * @param {CollectionPointsUpdateArgs} args - Arguments to update one CollectionPoints.
     * @example
     * // Update one CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CollectionPointsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionPointsUpdateArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CollectionPoints.
     * @param {CollectionPointsDeleteManyArgs} args - Arguments to filter CollectionPoints to delete.
     * @example
     * // Delete a few CollectionPoints
     * const { count } = await prisma.collectionPoints.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CollectionPointsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionPointsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollectionPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CollectionPointsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionPointsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollectionPoints.
     * @param {CollectionPointsUpsertArgs} args - Arguments to update or create a CollectionPoints.
     * @example
     * // Update or create a CollectionPoints
     * const collectionPoints = await prisma.collectionPoints.upsert({
     *   create: {
     *     // ... data to create a CollectionPoints
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollectionPoints we want to update
     *   }
     * })
    **/
    upsert<T extends CollectionPointsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionPointsUpsertArgs<ExtArgs>>
    ): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CollectionPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsCountArgs} args - Arguments to filter CollectionPoints to count.
     * @example
     * // Count the number of CollectionPoints
     * const count = await prisma.collectionPoints.count({
     *   where: {
     *     // ... the filter for the CollectionPoints we want to count
     *   }
     * })
    **/
    count<T extends CollectionPointsCountArgs>(
      args?: Subset<T, CollectionPointsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionPointsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollectionPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionPointsAggregateArgs>(args: Subset<T, CollectionPointsAggregateArgs>): Prisma.PrismaPromise<GetCollectionPointsAggregateType<T>>

    /**
     * Group by CollectionPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionPointsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionPointsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionPointsGroupByArgs['orderBy'] }
        : { orderBy?: CollectionPointsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionPointsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionPointsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollectionPoints model
   */
  readonly fields: CollectionPointsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollectionPoints.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionPointsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recycling<T extends CollectionPoints$recyclingArgs<ExtArgs> = {}>(args?: Subset<T, CollectionPoints$recyclingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CollectionPoints model
   */ 
  interface CollectionPointsFieldRefs {
    readonly id: FieldRef<"CollectionPoints", 'String'>
    readonly mac_address: FieldRef<"CollectionPoints", 'String'>
    readonly image: FieldRef<"CollectionPoints", 'String'>
    readonly name: FieldRef<"CollectionPoints", 'String'>
    readonly email: FieldRef<"CollectionPoints", 'String'>
    readonly whatsapp: FieldRef<"CollectionPoints", 'String'>
    readonly latitude: FieldRef<"CollectionPoints", 'Float'>
    readonly longitude: FieldRef<"CollectionPoints", 'Float'>
    readonly city: FieldRef<"CollectionPoints", 'String'>
    readonly uf: FieldRef<"CollectionPoints", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CollectionPoints findUnique
   */
  export type CollectionPointsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPoints to fetch.
     */
    where: CollectionPointsWhereUniqueInput
  }


  /**
   * CollectionPoints findUniqueOrThrow
   */
  export type CollectionPointsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPoints to fetch.
     */
    where: CollectionPointsWhereUniqueInput
  }


  /**
   * CollectionPoints findFirst
   */
  export type CollectionPointsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPoints to fetch.
     */
    where?: CollectionPointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPoints to fetch.
     */
    orderBy?: CollectionPointsOrderByWithRelationInput | CollectionPointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionPoints.
     */
    cursor?: CollectionPointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionPoints.
     */
    distinct?: CollectionPointsScalarFieldEnum | CollectionPointsScalarFieldEnum[]
  }


  /**
   * CollectionPoints findFirstOrThrow
   */
  export type CollectionPointsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPoints to fetch.
     */
    where?: CollectionPointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPoints to fetch.
     */
    orderBy?: CollectionPointsOrderByWithRelationInput | CollectionPointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionPoints.
     */
    cursor?: CollectionPointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionPoints.
     */
    distinct?: CollectionPointsScalarFieldEnum | CollectionPointsScalarFieldEnum[]
  }


  /**
   * CollectionPoints findMany
   */
  export type CollectionPointsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * Filter, which CollectionPoints to fetch.
     */
    where?: CollectionPointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionPoints to fetch.
     */
    orderBy?: CollectionPointsOrderByWithRelationInput | CollectionPointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollectionPoints.
     */
    cursor?: CollectionPointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionPoints.
     */
    skip?: number
    distinct?: CollectionPointsScalarFieldEnum | CollectionPointsScalarFieldEnum[]
  }


  /**
   * CollectionPoints create
   */
  export type CollectionPointsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * The data needed to create a CollectionPoints.
     */
    data: XOR<CollectionPointsCreateInput, CollectionPointsUncheckedCreateInput>
  }


  /**
   * CollectionPoints createMany
   */
  export type CollectionPointsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollectionPoints.
     */
    data: CollectionPointsCreateManyInput | CollectionPointsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CollectionPoints update
   */
  export type CollectionPointsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * The data needed to update a CollectionPoints.
     */
    data: XOR<CollectionPointsUpdateInput, CollectionPointsUncheckedUpdateInput>
    /**
     * Choose, which CollectionPoints to update.
     */
    where: CollectionPointsWhereUniqueInput
  }


  /**
   * CollectionPoints updateMany
   */
  export type CollectionPointsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollectionPoints.
     */
    data: XOR<CollectionPointsUpdateManyMutationInput, CollectionPointsUncheckedUpdateManyInput>
    /**
     * Filter which CollectionPoints to update
     */
    where?: CollectionPointsWhereInput
  }


  /**
   * CollectionPoints upsert
   */
  export type CollectionPointsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * The filter to search for the CollectionPoints to update in case it exists.
     */
    where: CollectionPointsWhereUniqueInput
    /**
     * In case the CollectionPoints found by the `where` argument doesn't exist, create a new CollectionPoints with this data.
     */
    create: XOR<CollectionPointsCreateInput, CollectionPointsUncheckedCreateInput>
    /**
     * In case the CollectionPoints was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionPointsUpdateInput, CollectionPointsUncheckedUpdateInput>
  }


  /**
   * CollectionPoints delete
   */
  export type CollectionPointsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    /**
     * Filter which CollectionPoints to delete.
     */
    where: CollectionPointsWhereUniqueInput
  }


  /**
   * CollectionPoints deleteMany
   */
  export type CollectionPointsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionPoints to delete
     */
    where?: CollectionPointsWhereInput
  }


  /**
   * CollectionPoints.recycling
   */
  export type CollectionPoints$recyclingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    where?: RecyclingWhereInput
    orderBy?: RecyclingOrderByWithRelationInput | RecyclingOrderByWithRelationInput[]
    cursor?: RecyclingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecyclingScalarFieldEnum | RecyclingScalarFieldEnum[]
  }


  /**
   * CollectionPoints without action
   */
  export type CollectionPointsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
  }



  /**
   * Model Recycling
   */

  export type AggregateRecycling = {
    _count: RecyclingCountAggregateOutputType | null
    _avg: RecyclingAvgAggregateOutputType | null
    _sum: RecyclingSumAggregateOutputType | null
    _min: RecyclingMinAggregateOutputType | null
    _max: RecyclingMaxAggregateOutputType | null
  }

  export type RecyclingAvgAggregateOutputType = {
    number_of_bottles: number | null
    total_bottles_score: number | null
  }

  export type RecyclingSumAggregateOutputType = {
    number_of_bottles: number | null
    total_bottles_score: number | null
  }

  export type RecyclingMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    collect_point_id: string | null
    number_of_bottles: number | null
    total_bottles_score: number | null
    created_at: Date | null
    end_at: Date | null
  }

  export type RecyclingMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    collect_point_id: string | null
    number_of_bottles: number | null
    total_bottles_score: number | null
    created_at: Date | null
    end_at: Date | null
  }

  export type RecyclingCountAggregateOutputType = {
    id: number
    user_id: number
    collect_point_id: number
    number_of_bottles: number
    total_bottles_score: number
    created_at: number
    end_at: number
    _all: number
  }


  export type RecyclingAvgAggregateInputType = {
    number_of_bottles?: true
    total_bottles_score?: true
  }

  export type RecyclingSumAggregateInputType = {
    number_of_bottles?: true
    total_bottles_score?: true
  }

  export type RecyclingMinAggregateInputType = {
    id?: true
    user_id?: true
    collect_point_id?: true
    number_of_bottles?: true
    total_bottles_score?: true
    created_at?: true
    end_at?: true
  }

  export type RecyclingMaxAggregateInputType = {
    id?: true
    user_id?: true
    collect_point_id?: true
    number_of_bottles?: true
    total_bottles_score?: true
    created_at?: true
    end_at?: true
  }

  export type RecyclingCountAggregateInputType = {
    id?: true
    user_id?: true
    collect_point_id?: true
    number_of_bottles?: true
    total_bottles_score?: true
    created_at?: true
    end_at?: true
    _all?: true
  }

  export type RecyclingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recycling to aggregate.
     */
    where?: RecyclingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recyclings to fetch.
     */
    orderBy?: RecyclingOrderByWithRelationInput | RecyclingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecyclingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recyclings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recyclings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recyclings
    **/
    _count?: true | RecyclingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecyclingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecyclingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecyclingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecyclingMaxAggregateInputType
  }

  export type GetRecyclingAggregateType<T extends RecyclingAggregateArgs> = {
        [P in keyof T & keyof AggregateRecycling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecycling[P]>
      : GetScalarType<T[P], AggregateRecycling[P]>
  }




  export type RecyclingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecyclingWhereInput
    orderBy?: RecyclingOrderByWithAggregationInput | RecyclingOrderByWithAggregationInput[]
    by: RecyclingScalarFieldEnum[] | RecyclingScalarFieldEnum
    having?: RecyclingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecyclingCountAggregateInputType | true
    _avg?: RecyclingAvgAggregateInputType
    _sum?: RecyclingSumAggregateInputType
    _min?: RecyclingMinAggregateInputType
    _max?: RecyclingMaxAggregateInputType
  }

  export type RecyclingGroupByOutputType = {
    id: string
    user_id: string
    collect_point_id: string | null
    number_of_bottles: number
    total_bottles_score: number
    created_at: Date
    end_at: Date | null
    _count: RecyclingCountAggregateOutputType | null
    _avg: RecyclingAvgAggregateOutputType | null
    _sum: RecyclingSumAggregateOutputType | null
    _min: RecyclingMinAggregateOutputType | null
    _max: RecyclingMaxAggregateOutputType | null
  }

  type GetRecyclingGroupByPayload<T extends RecyclingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecyclingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecyclingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecyclingGroupByOutputType[P]>
            : GetScalarType<T[P], RecyclingGroupByOutputType[P]>
        }
      >
    >


  export type RecyclingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    collect_point_id?: boolean
    number_of_bottles?: boolean
    total_bottles_score?: boolean
    created_at?: boolean
    end_at?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    collect_point?: boolean | Recycling$collect_pointArgs<ExtArgs>
    Bottles?: boolean | Recycling$BottlesArgs<ExtArgs>
    _count?: boolean | RecyclingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recycling"]>

  export type RecyclingSelectScalar = {
    id?: boolean
    user_id?: boolean
    collect_point_id?: boolean
    number_of_bottles?: boolean
    total_bottles_score?: boolean
    created_at?: boolean
    end_at?: boolean
  }

  export type RecyclingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    collect_point?: boolean | Recycling$collect_pointArgs<ExtArgs>
    Bottles?: boolean | Recycling$BottlesArgs<ExtArgs>
    _count?: boolean | RecyclingCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RecyclingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recycling"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      collect_point: Prisma.$CollectionPointsPayload<ExtArgs> | null
      Bottles: Prisma.$BottlesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      collect_point_id: string | null
      number_of_bottles: number
      total_bottles_score: number
      created_at: Date
      end_at: Date | null
    }, ExtArgs["result"]["recycling"]>
    composites: {}
  }


  type RecyclingGetPayload<S extends boolean | null | undefined | RecyclingDefaultArgs> = $Result.GetResult<Prisma.$RecyclingPayload, S>

  type RecyclingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecyclingFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RecyclingCountAggregateInputType | true
    }

  export interface RecyclingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recycling'], meta: { name: 'Recycling' } }
    /**
     * Find zero or one Recycling that matches the filter.
     * @param {RecyclingFindUniqueArgs} args - Arguments to find a Recycling
     * @example
     * // Get one Recycling
     * const recycling = await prisma.recycling.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecyclingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecyclingFindUniqueArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recycling that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecyclingFindUniqueOrThrowArgs} args - Arguments to find a Recycling
     * @example
     * // Get one Recycling
     * const recycling = await prisma.recycling.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecyclingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecyclingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recycling that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingFindFirstArgs} args - Arguments to find a Recycling
     * @example
     * // Get one Recycling
     * const recycling = await prisma.recycling.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecyclingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecyclingFindFirstArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recycling that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingFindFirstOrThrowArgs} args - Arguments to find a Recycling
     * @example
     * // Get one Recycling
     * const recycling = await prisma.recycling.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecyclingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecyclingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recyclings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recyclings
     * const recyclings = await prisma.recycling.findMany()
     * 
     * // Get first 10 Recyclings
     * const recyclings = await prisma.recycling.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recyclingWithIdOnly = await prisma.recycling.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecyclingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecyclingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recycling.
     * @param {RecyclingCreateArgs} args - Arguments to create a Recycling.
     * @example
     * // Create one Recycling
     * const Recycling = await prisma.recycling.create({
     *   data: {
     *     // ... data to create a Recycling
     *   }
     * })
     * 
    **/
    create<T extends RecyclingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecyclingCreateArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recyclings.
     *     @param {RecyclingCreateManyArgs} args - Arguments to create many Recyclings.
     *     @example
     *     // Create many Recyclings
     *     const recycling = await prisma.recycling.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecyclingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecyclingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recycling.
     * @param {RecyclingDeleteArgs} args - Arguments to delete one Recycling.
     * @example
     * // Delete one Recycling
     * const Recycling = await prisma.recycling.delete({
     *   where: {
     *     // ... filter to delete one Recycling
     *   }
     * })
     * 
    **/
    delete<T extends RecyclingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecyclingDeleteArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recycling.
     * @param {RecyclingUpdateArgs} args - Arguments to update one Recycling.
     * @example
     * // Update one Recycling
     * const recycling = await prisma.recycling.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecyclingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecyclingUpdateArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recyclings.
     * @param {RecyclingDeleteManyArgs} args - Arguments to filter Recyclings to delete.
     * @example
     * // Delete a few Recyclings
     * const { count } = await prisma.recycling.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecyclingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecyclingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recyclings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recyclings
     * const recycling = await prisma.recycling.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecyclingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecyclingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recycling.
     * @param {RecyclingUpsertArgs} args - Arguments to update or create a Recycling.
     * @example
     * // Update or create a Recycling
     * const recycling = await prisma.recycling.upsert({
     *   create: {
     *     // ... data to create a Recycling
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recycling we want to update
     *   }
     * })
    **/
    upsert<T extends RecyclingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecyclingUpsertArgs<ExtArgs>>
    ): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Recyclings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingCountArgs} args - Arguments to filter Recyclings to count.
     * @example
     * // Count the number of Recyclings
     * const count = await prisma.recycling.count({
     *   where: {
     *     // ... the filter for the Recyclings we want to count
     *   }
     * })
    **/
    count<T extends RecyclingCountArgs>(
      args?: Subset<T, RecyclingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecyclingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recycling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecyclingAggregateArgs>(args: Subset<T, RecyclingAggregateArgs>): Prisma.PrismaPromise<GetRecyclingAggregateType<T>>

    /**
     * Group by Recycling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecyclingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecyclingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecyclingGroupByArgs['orderBy'] }
        : { orderBy?: RecyclingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecyclingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecyclingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recycling model
   */
  readonly fields: RecyclingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recycling.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecyclingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    collect_point<T extends Recycling$collect_pointArgs<ExtArgs> = {}>(args?: Subset<T, Recycling$collect_pointArgs<ExtArgs>>): Prisma__CollectionPointsClient<$Result.GetResult<Prisma.$CollectionPointsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Bottles<T extends Recycling$BottlesArgs<ExtArgs> = {}>(args?: Subset<T, Recycling$BottlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Recycling model
   */ 
  interface RecyclingFieldRefs {
    readonly id: FieldRef<"Recycling", 'String'>
    readonly user_id: FieldRef<"Recycling", 'String'>
    readonly collect_point_id: FieldRef<"Recycling", 'String'>
    readonly number_of_bottles: FieldRef<"Recycling", 'Int'>
    readonly total_bottles_score: FieldRef<"Recycling", 'Int'>
    readonly created_at: FieldRef<"Recycling", 'DateTime'>
    readonly end_at: FieldRef<"Recycling", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Recycling findUnique
   */
  export type RecyclingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * Filter, which Recycling to fetch.
     */
    where: RecyclingWhereUniqueInput
  }


  /**
   * Recycling findUniqueOrThrow
   */
  export type RecyclingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * Filter, which Recycling to fetch.
     */
    where: RecyclingWhereUniqueInput
  }


  /**
   * Recycling findFirst
   */
  export type RecyclingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * Filter, which Recycling to fetch.
     */
    where?: RecyclingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recyclings to fetch.
     */
    orderBy?: RecyclingOrderByWithRelationInput | RecyclingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recyclings.
     */
    cursor?: RecyclingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recyclings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recyclings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recyclings.
     */
    distinct?: RecyclingScalarFieldEnum | RecyclingScalarFieldEnum[]
  }


  /**
   * Recycling findFirstOrThrow
   */
  export type RecyclingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * Filter, which Recycling to fetch.
     */
    where?: RecyclingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recyclings to fetch.
     */
    orderBy?: RecyclingOrderByWithRelationInput | RecyclingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recyclings.
     */
    cursor?: RecyclingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recyclings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recyclings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recyclings.
     */
    distinct?: RecyclingScalarFieldEnum | RecyclingScalarFieldEnum[]
  }


  /**
   * Recycling findMany
   */
  export type RecyclingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * Filter, which Recyclings to fetch.
     */
    where?: RecyclingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recyclings to fetch.
     */
    orderBy?: RecyclingOrderByWithRelationInput | RecyclingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recyclings.
     */
    cursor?: RecyclingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recyclings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recyclings.
     */
    skip?: number
    distinct?: RecyclingScalarFieldEnum | RecyclingScalarFieldEnum[]
  }


  /**
   * Recycling create
   */
  export type RecyclingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * The data needed to create a Recycling.
     */
    data: XOR<RecyclingCreateInput, RecyclingUncheckedCreateInput>
  }


  /**
   * Recycling createMany
   */
  export type RecyclingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recyclings.
     */
    data: RecyclingCreateManyInput | RecyclingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Recycling update
   */
  export type RecyclingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * The data needed to update a Recycling.
     */
    data: XOR<RecyclingUpdateInput, RecyclingUncheckedUpdateInput>
    /**
     * Choose, which Recycling to update.
     */
    where: RecyclingWhereUniqueInput
  }


  /**
   * Recycling updateMany
   */
  export type RecyclingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recyclings.
     */
    data: XOR<RecyclingUpdateManyMutationInput, RecyclingUncheckedUpdateManyInput>
    /**
     * Filter which Recyclings to update
     */
    where?: RecyclingWhereInput
  }


  /**
   * Recycling upsert
   */
  export type RecyclingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * The filter to search for the Recycling to update in case it exists.
     */
    where: RecyclingWhereUniqueInput
    /**
     * In case the Recycling found by the `where` argument doesn't exist, create a new Recycling with this data.
     */
    create: XOR<RecyclingCreateInput, RecyclingUncheckedCreateInput>
    /**
     * In case the Recycling was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecyclingUpdateInput, RecyclingUncheckedUpdateInput>
  }


  /**
   * Recycling delete
   */
  export type RecyclingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
    /**
     * Filter which Recycling to delete.
     */
    where: RecyclingWhereUniqueInput
  }


  /**
   * Recycling deleteMany
   */
  export type RecyclingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recyclings to delete
     */
    where?: RecyclingWhereInput
  }


  /**
   * Recycling.collect_point
   */
  export type Recycling$collect_pointArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionPoints
     */
    select?: CollectionPointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionPointsInclude<ExtArgs> | null
    where?: CollectionPointsWhereInput
  }


  /**
   * Recycling.Bottles
   */
  export type Recycling$BottlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    where?: BottlesWhereInput
    orderBy?: BottlesOrderByWithRelationInput | BottlesOrderByWithRelationInput[]
    cursor?: BottlesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BottlesScalarFieldEnum | BottlesScalarFieldEnum[]
  }


  /**
   * Recycling without action
   */
  export type RecyclingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recycling
     */
    select?: RecyclingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecyclingInclude<ExtArgs> | null
  }



  /**
   * Model Bottles
   */

  export type AggregateBottles = {
    _count: BottlesCountAggregateOutputType | null
    _avg: BottlesAvgAggregateOutputType | null
    _sum: BottlesSumAggregateOutputType | null
    _min: BottlesMinAggregateOutputType | null
    _max: BottlesMaxAggregateOutputType | null
  }

  export type BottlesAvgAggregateOutputType = {
    level: number | null
    points: number | null
  }

  export type BottlesSumAggregateOutputType = {
    level: number | null
    points: number | null
  }

  export type BottlesMinAggregateOutputType = {
    id: string | null
    recycling_id: string | null
    level: number | null
    points: number | null
    created_at: Date | null
  }

  export type BottlesMaxAggregateOutputType = {
    id: string | null
    recycling_id: string | null
    level: number | null
    points: number | null
    created_at: Date | null
  }

  export type BottlesCountAggregateOutputType = {
    id: number
    recycling_id: number
    level: number
    points: number
    created_at: number
    _all: number
  }


  export type BottlesAvgAggregateInputType = {
    level?: true
    points?: true
  }

  export type BottlesSumAggregateInputType = {
    level?: true
    points?: true
  }

  export type BottlesMinAggregateInputType = {
    id?: true
    recycling_id?: true
    level?: true
    points?: true
    created_at?: true
  }

  export type BottlesMaxAggregateInputType = {
    id?: true
    recycling_id?: true
    level?: true
    points?: true
    created_at?: true
  }

  export type BottlesCountAggregateInputType = {
    id?: true
    recycling_id?: true
    level?: true
    points?: true
    created_at?: true
    _all?: true
  }

  export type BottlesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bottles to aggregate.
     */
    where?: BottlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bottles to fetch.
     */
    orderBy?: BottlesOrderByWithRelationInput | BottlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BottlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bottles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bottles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bottles
    **/
    _count?: true | BottlesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BottlesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BottlesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BottlesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BottlesMaxAggregateInputType
  }

  export type GetBottlesAggregateType<T extends BottlesAggregateArgs> = {
        [P in keyof T & keyof AggregateBottles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBottles[P]>
      : GetScalarType<T[P], AggregateBottles[P]>
  }




  export type BottlesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BottlesWhereInput
    orderBy?: BottlesOrderByWithAggregationInput | BottlesOrderByWithAggregationInput[]
    by: BottlesScalarFieldEnum[] | BottlesScalarFieldEnum
    having?: BottlesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BottlesCountAggregateInputType | true
    _avg?: BottlesAvgAggregateInputType
    _sum?: BottlesSumAggregateInputType
    _min?: BottlesMinAggregateInputType
    _max?: BottlesMaxAggregateInputType
  }

  export type BottlesGroupByOutputType = {
    id: string
    recycling_id: string
    level: number
    points: number
    created_at: Date
    _count: BottlesCountAggregateOutputType | null
    _avg: BottlesAvgAggregateOutputType | null
    _sum: BottlesSumAggregateOutputType | null
    _min: BottlesMinAggregateOutputType | null
    _max: BottlesMaxAggregateOutputType | null
  }

  type GetBottlesGroupByPayload<T extends BottlesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BottlesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BottlesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BottlesGroupByOutputType[P]>
            : GetScalarType<T[P], BottlesGroupByOutputType[P]>
        }
      >
    >


  export type BottlesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recycling_id?: boolean
    level?: boolean
    points?: boolean
    created_at?: boolean
    recycling?: boolean | RecyclingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bottles"]>

  export type BottlesSelectScalar = {
    id?: boolean
    recycling_id?: boolean
    level?: boolean
    points?: boolean
    created_at?: boolean
  }

  export type BottlesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recycling?: boolean | RecyclingDefaultArgs<ExtArgs>
  }


  export type $BottlesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bottles"
    objects: {
      recycling: Prisma.$RecyclingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recycling_id: string
      level: number
      points: number
      created_at: Date
    }, ExtArgs["result"]["bottles"]>
    composites: {}
  }


  type BottlesGetPayload<S extends boolean | null | undefined | BottlesDefaultArgs> = $Result.GetResult<Prisma.$BottlesPayload, S>

  type BottlesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BottlesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BottlesCountAggregateInputType | true
    }

  export interface BottlesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bottles'], meta: { name: 'Bottles' } }
    /**
     * Find zero or one Bottles that matches the filter.
     * @param {BottlesFindUniqueArgs} args - Arguments to find a Bottles
     * @example
     * // Get one Bottles
     * const bottles = await prisma.bottles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BottlesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BottlesFindUniqueArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bottles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BottlesFindUniqueOrThrowArgs} args - Arguments to find a Bottles
     * @example
     * // Get one Bottles
     * const bottles = await prisma.bottles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BottlesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BottlesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bottles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesFindFirstArgs} args - Arguments to find a Bottles
     * @example
     * // Get one Bottles
     * const bottles = await prisma.bottles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BottlesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BottlesFindFirstArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bottles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesFindFirstOrThrowArgs} args - Arguments to find a Bottles
     * @example
     * // Get one Bottles
     * const bottles = await prisma.bottles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BottlesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BottlesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bottles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bottles
     * const bottles = await prisma.bottles.findMany()
     * 
     * // Get first 10 Bottles
     * const bottles = await prisma.bottles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bottlesWithIdOnly = await prisma.bottles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BottlesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BottlesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bottles.
     * @param {BottlesCreateArgs} args - Arguments to create a Bottles.
     * @example
     * // Create one Bottles
     * const Bottles = await prisma.bottles.create({
     *   data: {
     *     // ... data to create a Bottles
     *   }
     * })
     * 
    **/
    create<T extends BottlesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BottlesCreateArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bottles.
     *     @param {BottlesCreateManyArgs} args - Arguments to create many Bottles.
     *     @example
     *     // Create many Bottles
     *     const bottles = await prisma.bottles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BottlesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BottlesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bottles.
     * @param {BottlesDeleteArgs} args - Arguments to delete one Bottles.
     * @example
     * // Delete one Bottles
     * const Bottles = await prisma.bottles.delete({
     *   where: {
     *     // ... filter to delete one Bottles
     *   }
     * })
     * 
    **/
    delete<T extends BottlesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BottlesDeleteArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bottles.
     * @param {BottlesUpdateArgs} args - Arguments to update one Bottles.
     * @example
     * // Update one Bottles
     * const bottles = await prisma.bottles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BottlesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BottlesUpdateArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bottles.
     * @param {BottlesDeleteManyArgs} args - Arguments to filter Bottles to delete.
     * @example
     * // Delete a few Bottles
     * const { count } = await prisma.bottles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BottlesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BottlesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bottles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bottles
     * const bottles = await prisma.bottles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BottlesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BottlesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bottles.
     * @param {BottlesUpsertArgs} args - Arguments to update or create a Bottles.
     * @example
     * // Update or create a Bottles
     * const bottles = await prisma.bottles.upsert({
     *   create: {
     *     // ... data to create a Bottles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bottles we want to update
     *   }
     * })
    **/
    upsert<T extends BottlesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BottlesUpsertArgs<ExtArgs>>
    ): Prisma__BottlesClient<$Result.GetResult<Prisma.$BottlesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bottles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesCountArgs} args - Arguments to filter Bottles to count.
     * @example
     * // Count the number of Bottles
     * const count = await prisma.bottles.count({
     *   where: {
     *     // ... the filter for the Bottles we want to count
     *   }
     * })
    **/
    count<T extends BottlesCountArgs>(
      args?: Subset<T, BottlesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BottlesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bottles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BottlesAggregateArgs>(args: Subset<T, BottlesAggregateArgs>): Prisma.PrismaPromise<GetBottlesAggregateType<T>>

    /**
     * Group by Bottles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottlesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BottlesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BottlesGroupByArgs['orderBy'] }
        : { orderBy?: BottlesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BottlesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBottlesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bottles model
   */
  readonly fields: BottlesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bottles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BottlesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recycling<T extends RecyclingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecyclingDefaultArgs<ExtArgs>>): Prisma__RecyclingClient<$Result.GetResult<Prisma.$RecyclingPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bottles model
   */ 
  interface BottlesFieldRefs {
    readonly id: FieldRef<"Bottles", 'String'>
    readonly recycling_id: FieldRef<"Bottles", 'String'>
    readonly level: FieldRef<"Bottles", 'Int'>
    readonly points: FieldRef<"Bottles", 'Int'>
    readonly created_at: FieldRef<"Bottles", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Bottles findUnique
   */
  export type BottlesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * Filter, which Bottles to fetch.
     */
    where: BottlesWhereUniqueInput
  }


  /**
   * Bottles findUniqueOrThrow
   */
  export type BottlesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * Filter, which Bottles to fetch.
     */
    where: BottlesWhereUniqueInput
  }


  /**
   * Bottles findFirst
   */
  export type BottlesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * Filter, which Bottles to fetch.
     */
    where?: BottlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bottles to fetch.
     */
    orderBy?: BottlesOrderByWithRelationInput | BottlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bottles.
     */
    cursor?: BottlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bottles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bottles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bottles.
     */
    distinct?: BottlesScalarFieldEnum | BottlesScalarFieldEnum[]
  }


  /**
   * Bottles findFirstOrThrow
   */
  export type BottlesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * Filter, which Bottles to fetch.
     */
    where?: BottlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bottles to fetch.
     */
    orderBy?: BottlesOrderByWithRelationInput | BottlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bottles.
     */
    cursor?: BottlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bottles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bottles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bottles.
     */
    distinct?: BottlesScalarFieldEnum | BottlesScalarFieldEnum[]
  }


  /**
   * Bottles findMany
   */
  export type BottlesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * Filter, which Bottles to fetch.
     */
    where?: BottlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bottles to fetch.
     */
    orderBy?: BottlesOrderByWithRelationInput | BottlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bottles.
     */
    cursor?: BottlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bottles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bottles.
     */
    skip?: number
    distinct?: BottlesScalarFieldEnum | BottlesScalarFieldEnum[]
  }


  /**
   * Bottles create
   */
  export type BottlesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * The data needed to create a Bottles.
     */
    data: XOR<BottlesCreateInput, BottlesUncheckedCreateInput>
  }


  /**
   * Bottles createMany
   */
  export type BottlesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bottles.
     */
    data: BottlesCreateManyInput | BottlesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Bottles update
   */
  export type BottlesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * The data needed to update a Bottles.
     */
    data: XOR<BottlesUpdateInput, BottlesUncheckedUpdateInput>
    /**
     * Choose, which Bottles to update.
     */
    where: BottlesWhereUniqueInput
  }


  /**
   * Bottles updateMany
   */
  export type BottlesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bottles.
     */
    data: XOR<BottlesUpdateManyMutationInput, BottlesUncheckedUpdateManyInput>
    /**
     * Filter which Bottles to update
     */
    where?: BottlesWhereInput
  }


  /**
   * Bottles upsert
   */
  export type BottlesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * The filter to search for the Bottles to update in case it exists.
     */
    where: BottlesWhereUniqueInput
    /**
     * In case the Bottles found by the `where` argument doesn't exist, create a new Bottles with this data.
     */
    create: XOR<BottlesCreateInput, BottlesUncheckedCreateInput>
    /**
     * In case the Bottles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BottlesUpdateInput, BottlesUncheckedUpdateInput>
  }


  /**
   * Bottles delete
   */
  export type BottlesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
    /**
     * Filter which Bottles to delete.
     */
    where: BottlesWhereUniqueInput
  }


  /**
   * Bottles deleteMany
   */
  export type BottlesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bottles to delete
     */
    where?: BottlesWhereInput
  }


  /**
   * Bottles without action
   */
  export type BottlesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottles
     */
    select?: BottlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BottlesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    profile_id: 'profile_id',
    level_id: 'level_id',
    image: 'image',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password',
    created_at: 'created_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    created_at: 'created_at'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const InvalidTokensScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token',
    invalidated_at: 'invalidated_at'
  };

  export type InvalidTokensScalarFieldEnum = (typeof InvalidTokensScalarFieldEnum)[keyof typeof InvalidTokensScalarFieldEnum]


  export const ResetTokensScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token',
    expires_at: 'expires_at'
  };

  export type ResetTokensScalarFieldEnum = (typeof ResetTokensScalarFieldEnum)[keyof typeof ResetTokensScalarFieldEnum]


  export const LevelsScalarFieldEnum: {
    id: 'id',
    profile_id: 'profile_id',
    name: 'name',
    description: 'description',
    image: 'image',
    required_score: 'required_score',
    position: 'position',
    created_at: 'created_at',
    unlocked: 'unlocked'
  };

  export type LevelsScalarFieldEnum = (typeof LevelsScalarFieldEnum)[keyof typeof LevelsScalarFieldEnum]


  export const LevelRewardsScalarFieldEnum: {
    id: 'id',
    level_id: 'level_id',
    name: 'name',
    description: 'description',
    image: 'image',
    unlocked_at: 'unlocked_at'
  };

  export type LevelRewardsScalarFieldEnum = (typeof LevelRewardsScalarFieldEnum)[keyof typeof LevelRewardsScalarFieldEnum]


  export const CollectionPointsScalarFieldEnum: {
    id: 'id',
    mac_address: 'mac_address',
    image: 'image',
    name: 'name',
    email: 'email',
    whatsapp: 'whatsapp',
    latitude: 'latitude',
    longitude: 'longitude',
    city: 'city',
    uf: 'uf'
  };

  export type CollectionPointsScalarFieldEnum = (typeof CollectionPointsScalarFieldEnum)[keyof typeof CollectionPointsScalarFieldEnum]


  export const RecyclingScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    collect_point_id: 'collect_point_id',
    number_of_bottles: 'number_of_bottles',
    total_bottles_score: 'total_bottles_score',
    created_at: 'created_at',
    end_at: 'end_at'
  };

  export type RecyclingScalarFieldEnum = (typeof RecyclingScalarFieldEnum)[keyof typeof RecyclingScalarFieldEnum]


  export const BottlesScalarFieldEnum: {
    id: 'id',
    recycling_id: 'recycling_id',
    level: 'level',
    points: 'points',
    created_at: 'created_at'
  };

  export type BottlesScalarFieldEnum = (typeof BottlesScalarFieldEnum)[keyof typeof BottlesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    profile_id?: StringFilter<"Users"> | string
    level_id?: StringNullableFilter<"Users"> | string | null
    image?: StringNullableFilter<"Users"> | string | null
    name?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    invalid_tokens?: InvalidTokensListRelationFilter
    reset_token?: XOR<ResetTokensNullableRelationFilter, ResetTokensWhereInput> | null
    profile?: XOR<ProfilesRelationFilter, ProfilesWhereInput>
    level?: XOR<LevelsNullableRelationFilter, LevelsWhereInput> | null
    recycling?: RecyclingListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    profile_id?: SortOrder
    level_id?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    invalid_tokens?: InvalidTokensOrderByRelationAggregateInput
    reset_token?: ResetTokensOrderByWithRelationInput
    profile?: ProfilesOrderByWithRelationInput
    level?: LevelsOrderByWithRelationInput
    recycling?: RecyclingOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    profile_id?: StringFilter<"Users"> | string
    level_id?: StringNullableFilter<"Users"> | string | null
    image?: StringNullableFilter<"Users"> | string | null
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    invalid_tokens?: InvalidTokensListRelationFilter
    reset_token?: XOR<ResetTokensNullableRelationFilter, ResetTokensWhereInput> | null
    profile?: XOR<ProfilesRelationFilter, ProfilesWhereInput>
    level?: XOR<LevelsNullableRelationFilter, LevelsWhereInput> | null
    recycling?: RecyclingListRelationFilter
  }, "id" | "username" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    profile_id?: SortOrder
    level_id?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    profile_id?: StringWithAggregatesFilter<"Users"> | string
    level_id?: StringNullableWithAggregatesFilter<"Users"> | string | null
    image?: StringNullableWithAggregatesFilter<"Users"> | string | null
    name?: StringWithAggregatesFilter<"Users"> | string
    username?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    created_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type ProfilesWhereInput = {
    AND?: ProfilesWhereInput | ProfilesWhereInput[]
    OR?: ProfilesWhereInput[]
    NOT?: ProfilesWhereInput | ProfilesWhereInput[]
    id?: StringFilter<"Profiles"> | string
    name?: StringFilter<"Profiles"> | string
    description?: StringFilter<"Profiles"> | string
    image?: StringFilter<"Profiles"> | string
    created_at?: DateTimeFilter<"Profiles"> | Date | string
    levels?: LevelsListRelationFilter
    users?: UsersListRelationFilter
  }

  export type ProfilesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    levels?: LevelsOrderByRelationAggregateInput
    users?: UsersOrderByRelationAggregateInput
  }

  export type ProfilesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ProfilesWhereInput | ProfilesWhereInput[]
    OR?: ProfilesWhereInput[]
    NOT?: ProfilesWhereInput | ProfilesWhereInput[]
    description?: StringFilter<"Profiles"> | string
    image?: StringFilter<"Profiles"> | string
    created_at?: DateTimeFilter<"Profiles"> | Date | string
    levels?: LevelsListRelationFilter
    users?: UsersListRelationFilter
  }, "id" | "name">

  export type ProfilesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    _count?: ProfilesCountOrderByAggregateInput
    _max?: ProfilesMaxOrderByAggregateInput
    _min?: ProfilesMinOrderByAggregateInput
  }

  export type ProfilesScalarWhereWithAggregatesInput = {
    AND?: ProfilesScalarWhereWithAggregatesInput | ProfilesScalarWhereWithAggregatesInput[]
    OR?: ProfilesScalarWhereWithAggregatesInput[]
    NOT?: ProfilesScalarWhereWithAggregatesInput | ProfilesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profiles"> | string
    name?: StringWithAggregatesFilter<"Profiles"> | string
    description?: StringWithAggregatesFilter<"Profiles"> | string
    image?: StringWithAggregatesFilter<"Profiles"> | string
    created_at?: DateTimeWithAggregatesFilter<"Profiles"> | Date | string
  }

  export type InvalidTokensWhereInput = {
    AND?: InvalidTokensWhereInput | InvalidTokensWhereInput[]
    OR?: InvalidTokensWhereInput[]
    NOT?: InvalidTokensWhereInput | InvalidTokensWhereInput[]
    id?: IntFilter<"InvalidTokens"> | number
    user_id?: StringFilter<"InvalidTokens"> | string
    token?: StringFilter<"InvalidTokens"> | string
    invalidated_at?: DateTimeFilter<"InvalidTokens"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type InvalidTokensOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    invalidated_at?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type InvalidTokensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: InvalidTokensWhereInput | InvalidTokensWhereInput[]
    OR?: InvalidTokensWhereInput[]
    NOT?: InvalidTokensWhereInput | InvalidTokensWhereInput[]
    user_id?: StringFilter<"InvalidTokens"> | string
    invalidated_at?: DateTimeFilter<"InvalidTokens"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "token">

  export type InvalidTokensOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    invalidated_at?: SortOrder
    _count?: InvalidTokensCountOrderByAggregateInput
    _avg?: InvalidTokensAvgOrderByAggregateInput
    _max?: InvalidTokensMaxOrderByAggregateInput
    _min?: InvalidTokensMinOrderByAggregateInput
    _sum?: InvalidTokensSumOrderByAggregateInput
  }

  export type InvalidTokensScalarWhereWithAggregatesInput = {
    AND?: InvalidTokensScalarWhereWithAggregatesInput | InvalidTokensScalarWhereWithAggregatesInput[]
    OR?: InvalidTokensScalarWhereWithAggregatesInput[]
    NOT?: InvalidTokensScalarWhereWithAggregatesInput | InvalidTokensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InvalidTokens"> | number
    user_id?: StringWithAggregatesFilter<"InvalidTokens"> | string
    token?: StringWithAggregatesFilter<"InvalidTokens"> | string
    invalidated_at?: DateTimeWithAggregatesFilter<"InvalidTokens"> | Date | string
  }

  export type ResetTokensWhereInput = {
    AND?: ResetTokensWhereInput | ResetTokensWhereInput[]
    OR?: ResetTokensWhereInput[]
    NOT?: ResetTokensWhereInput | ResetTokensWhereInput[]
    id?: IntFilter<"ResetTokens"> | number
    user_id?: StringFilter<"ResetTokens"> | string
    token?: StringFilter<"ResetTokens"> | string
    expires_at?: DateTimeFilter<"ResetTokens"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type ResetTokensOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type ResetTokensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: ResetTokensWhereInput | ResetTokensWhereInput[]
    OR?: ResetTokensWhereInput[]
    NOT?: ResetTokensWhereInput | ResetTokensWhereInput[]
    token?: StringFilter<"ResetTokens"> | string
    expires_at?: DateTimeFilter<"ResetTokens"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "user_id">

  export type ResetTokensOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    _count?: ResetTokensCountOrderByAggregateInput
    _avg?: ResetTokensAvgOrderByAggregateInput
    _max?: ResetTokensMaxOrderByAggregateInput
    _min?: ResetTokensMinOrderByAggregateInput
    _sum?: ResetTokensSumOrderByAggregateInput
  }

  export type ResetTokensScalarWhereWithAggregatesInput = {
    AND?: ResetTokensScalarWhereWithAggregatesInput | ResetTokensScalarWhereWithAggregatesInput[]
    OR?: ResetTokensScalarWhereWithAggregatesInput[]
    NOT?: ResetTokensScalarWhereWithAggregatesInput | ResetTokensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResetTokens"> | number
    user_id?: StringWithAggregatesFilter<"ResetTokens"> | string
    token?: StringWithAggregatesFilter<"ResetTokens"> | string
    expires_at?: DateTimeWithAggregatesFilter<"ResetTokens"> | Date | string
  }

  export type LevelsWhereInput = {
    AND?: LevelsWhereInput | LevelsWhereInput[]
    OR?: LevelsWhereInput[]
    NOT?: LevelsWhereInput | LevelsWhereInput[]
    id?: StringFilter<"Levels"> | string
    profile_id?: StringFilter<"Levels"> | string
    name?: StringFilter<"Levels"> | string
    description?: StringFilter<"Levels"> | string
    image?: StringFilter<"Levels"> | string
    required_score?: IntFilter<"Levels"> | number
    position?: IntNullableFilter<"Levels"> | number | null
    created_at?: DateTimeFilter<"Levels"> | Date | string
    unlocked?: BoolNullableFilter<"Levels"> | boolean | null
    profile?: XOR<ProfilesRelationFilter, ProfilesWhereInput>
    level_rewards?: LevelRewardsListRelationFilter
    users?: UsersListRelationFilter
  }

  export type LevelsOrderByWithRelationInput = {
    id?: SortOrder
    profile_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    required_score?: SortOrder
    position?: SortOrderInput | SortOrder
    created_at?: SortOrder
    unlocked?: SortOrderInput | SortOrder
    profile?: ProfilesOrderByWithRelationInput
    level_rewards?: LevelRewardsOrderByRelationAggregateInput
    users?: UsersOrderByRelationAggregateInput
  }

  export type LevelsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: LevelsWhereInput | LevelsWhereInput[]
    OR?: LevelsWhereInput[]
    NOT?: LevelsWhereInput | LevelsWhereInput[]
    profile_id?: StringFilter<"Levels"> | string
    description?: StringFilter<"Levels"> | string
    image?: StringFilter<"Levels"> | string
    required_score?: IntFilter<"Levels"> | number
    position?: IntNullableFilter<"Levels"> | number | null
    created_at?: DateTimeFilter<"Levels"> | Date | string
    unlocked?: BoolNullableFilter<"Levels"> | boolean | null
    profile?: XOR<ProfilesRelationFilter, ProfilesWhereInput>
    level_rewards?: LevelRewardsListRelationFilter
    users?: UsersListRelationFilter
  }, "id" | "name">

  export type LevelsOrderByWithAggregationInput = {
    id?: SortOrder
    profile_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    required_score?: SortOrder
    position?: SortOrderInput | SortOrder
    created_at?: SortOrder
    unlocked?: SortOrderInput | SortOrder
    _count?: LevelsCountOrderByAggregateInput
    _avg?: LevelsAvgOrderByAggregateInput
    _max?: LevelsMaxOrderByAggregateInput
    _min?: LevelsMinOrderByAggregateInput
    _sum?: LevelsSumOrderByAggregateInput
  }

  export type LevelsScalarWhereWithAggregatesInput = {
    AND?: LevelsScalarWhereWithAggregatesInput | LevelsScalarWhereWithAggregatesInput[]
    OR?: LevelsScalarWhereWithAggregatesInput[]
    NOT?: LevelsScalarWhereWithAggregatesInput | LevelsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Levels"> | string
    profile_id?: StringWithAggregatesFilter<"Levels"> | string
    name?: StringWithAggregatesFilter<"Levels"> | string
    description?: StringWithAggregatesFilter<"Levels"> | string
    image?: StringWithAggregatesFilter<"Levels"> | string
    required_score?: IntWithAggregatesFilter<"Levels"> | number
    position?: IntNullableWithAggregatesFilter<"Levels"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"Levels"> | Date | string
    unlocked?: BoolNullableWithAggregatesFilter<"Levels"> | boolean | null
  }

  export type LevelRewardsWhereInput = {
    AND?: LevelRewardsWhereInput | LevelRewardsWhereInput[]
    OR?: LevelRewardsWhereInput[]
    NOT?: LevelRewardsWhereInput | LevelRewardsWhereInput[]
    id?: StringFilter<"LevelRewards"> | string
    level_id?: StringFilter<"LevelRewards"> | string
    name?: StringFilter<"LevelRewards"> | string
    description?: StringFilter<"LevelRewards"> | string
    image?: StringFilter<"LevelRewards"> | string
    unlocked_at?: DateTimeNullableFilter<"LevelRewards"> | Date | string | null
    level?: XOR<LevelsRelationFilter, LevelsWhereInput>
  }

  export type LevelRewardsOrderByWithRelationInput = {
    id?: SortOrder
    level_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    unlocked_at?: SortOrderInput | SortOrder
    level?: LevelsOrderByWithRelationInput
  }

  export type LevelRewardsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    level_id?: string
    AND?: LevelRewardsWhereInput | LevelRewardsWhereInput[]
    OR?: LevelRewardsWhereInput[]
    NOT?: LevelRewardsWhereInput | LevelRewardsWhereInput[]
    name?: StringFilter<"LevelRewards"> | string
    description?: StringFilter<"LevelRewards"> | string
    image?: StringFilter<"LevelRewards"> | string
    unlocked_at?: DateTimeNullableFilter<"LevelRewards"> | Date | string | null
    level?: XOR<LevelsRelationFilter, LevelsWhereInput>
  }, "id" | "level_id">

  export type LevelRewardsOrderByWithAggregationInput = {
    id?: SortOrder
    level_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    unlocked_at?: SortOrderInput | SortOrder
    _count?: LevelRewardsCountOrderByAggregateInput
    _max?: LevelRewardsMaxOrderByAggregateInput
    _min?: LevelRewardsMinOrderByAggregateInput
  }

  export type LevelRewardsScalarWhereWithAggregatesInput = {
    AND?: LevelRewardsScalarWhereWithAggregatesInput | LevelRewardsScalarWhereWithAggregatesInput[]
    OR?: LevelRewardsScalarWhereWithAggregatesInput[]
    NOT?: LevelRewardsScalarWhereWithAggregatesInput | LevelRewardsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LevelRewards"> | string
    level_id?: StringWithAggregatesFilter<"LevelRewards"> | string
    name?: StringWithAggregatesFilter<"LevelRewards"> | string
    description?: StringWithAggregatesFilter<"LevelRewards"> | string
    image?: StringWithAggregatesFilter<"LevelRewards"> | string
    unlocked_at?: DateTimeNullableWithAggregatesFilter<"LevelRewards"> | Date | string | null
  }

  export type CollectionPointsWhereInput = {
    AND?: CollectionPointsWhereInput | CollectionPointsWhereInput[]
    OR?: CollectionPointsWhereInput[]
    NOT?: CollectionPointsWhereInput | CollectionPointsWhereInput[]
    id?: StringFilter<"CollectionPoints"> | string
    mac_address?: StringFilter<"CollectionPoints"> | string
    image?: StringFilter<"CollectionPoints"> | string
    name?: StringFilter<"CollectionPoints"> | string
    email?: StringFilter<"CollectionPoints"> | string
    whatsapp?: StringFilter<"CollectionPoints"> | string
    latitude?: FloatFilter<"CollectionPoints"> | number
    longitude?: FloatFilter<"CollectionPoints"> | number
    city?: StringFilter<"CollectionPoints"> | string
    uf?: StringFilter<"CollectionPoints"> | string
    recycling?: RecyclingListRelationFilter
  }

  export type CollectionPointsOrderByWithRelationInput = {
    id?: SortOrder
    mac_address?: SortOrder
    image?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    city?: SortOrder
    uf?: SortOrder
    recycling?: RecyclingOrderByRelationAggregateInput
  }

  export type CollectionPointsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mac_address?: string
    AND?: CollectionPointsWhereInput | CollectionPointsWhereInput[]
    OR?: CollectionPointsWhereInput[]
    NOT?: CollectionPointsWhereInput | CollectionPointsWhereInput[]
    image?: StringFilter<"CollectionPoints"> | string
    name?: StringFilter<"CollectionPoints"> | string
    email?: StringFilter<"CollectionPoints"> | string
    whatsapp?: StringFilter<"CollectionPoints"> | string
    latitude?: FloatFilter<"CollectionPoints"> | number
    longitude?: FloatFilter<"CollectionPoints"> | number
    city?: StringFilter<"CollectionPoints"> | string
    uf?: StringFilter<"CollectionPoints"> | string
    recycling?: RecyclingListRelationFilter
  }, "id" | "mac_address">

  export type CollectionPointsOrderByWithAggregationInput = {
    id?: SortOrder
    mac_address?: SortOrder
    image?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    city?: SortOrder
    uf?: SortOrder
    _count?: CollectionPointsCountOrderByAggregateInput
    _avg?: CollectionPointsAvgOrderByAggregateInput
    _max?: CollectionPointsMaxOrderByAggregateInput
    _min?: CollectionPointsMinOrderByAggregateInput
    _sum?: CollectionPointsSumOrderByAggregateInput
  }

  export type CollectionPointsScalarWhereWithAggregatesInput = {
    AND?: CollectionPointsScalarWhereWithAggregatesInput | CollectionPointsScalarWhereWithAggregatesInput[]
    OR?: CollectionPointsScalarWhereWithAggregatesInput[]
    NOT?: CollectionPointsScalarWhereWithAggregatesInput | CollectionPointsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollectionPoints"> | string
    mac_address?: StringWithAggregatesFilter<"CollectionPoints"> | string
    image?: StringWithAggregatesFilter<"CollectionPoints"> | string
    name?: StringWithAggregatesFilter<"CollectionPoints"> | string
    email?: StringWithAggregatesFilter<"CollectionPoints"> | string
    whatsapp?: StringWithAggregatesFilter<"CollectionPoints"> | string
    latitude?: FloatWithAggregatesFilter<"CollectionPoints"> | number
    longitude?: FloatWithAggregatesFilter<"CollectionPoints"> | number
    city?: StringWithAggregatesFilter<"CollectionPoints"> | string
    uf?: StringWithAggregatesFilter<"CollectionPoints"> | string
  }

  export type RecyclingWhereInput = {
    AND?: RecyclingWhereInput | RecyclingWhereInput[]
    OR?: RecyclingWhereInput[]
    NOT?: RecyclingWhereInput | RecyclingWhereInput[]
    id?: StringFilter<"Recycling"> | string
    user_id?: StringFilter<"Recycling"> | string
    collect_point_id?: StringNullableFilter<"Recycling"> | string | null
    number_of_bottles?: IntFilter<"Recycling"> | number
    total_bottles_score?: IntFilter<"Recycling"> | number
    created_at?: DateTimeFilter<"Recycling"> | Date | string
    end_at?: DateTimeNullableFilter<"Recycling"> | Date | string | null
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    collect_point?: XOR<CollectionPointsNullableRelationFilter, CollectionPointsWhereInput> | null
    Bottles?: BottlesListRelationFilter
  }

  export type RecyclingOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    collect_point_id?: SortOrderInput | SortOrder
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrderInput | SortOrder
    user?: UsersOrderByWithRelationInput
    collect_point?: CollectionPointsOrderByWithRelationInput
    Bottles?: BottlesOrderByRelationAggregateInput
  }

  export type RecyclingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecyclingWhereInput | RecyclingWhereInput[]
    OR?: RecyclingWhereInput[]
    NOT?: RecyclingWhereInput | RecyclingWhereInput[]
    user_id?: StringFilter<"Recycling"> | string
    collect_point_id?: StringNullableFilter<"Recycling"> | string | null
    number_of_bottles?: IntFilter<"Recycling"> | number
    total_bottles_score?: IntFilter<"Recycling"> | number
    created_at?: DateTimeFilter<"Recycling"> | Date | string
    end_at?: DateTimeNullableFilter<"Recycling"> | Date | string | null
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    collect_point?: XOR<CollectionPointsNullableRelationFilter, CollectionPointsWhereInput> | null
    Bottles?: BottlesListRelationFilter
  }, "id">

  export type RecyclingOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    collect_point_id?: SortOrderInput | SortOrder
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrderInput | SortOrder
    _count?: RecyclingCountOrderByAggregateInput
    _avg?: RecyclingAvgOrderByAggregateInput
    _max?: RecyclingMaxOrderByAggregateInput
    _min?: RecyclingMinOrderByAggregateInput
    _sum?: RecyclingSumOrderByAggregateInput
  }

  export type RecyclingScalarWhereWithAggregatesInput = {
    AND?: RecyclingScalarWhereWithAggregatesInput | RecyclingScalarWhereWithAggregatesInput[]
    OR?: RecyclingScalarWhereWithAggregatesInput[]
    NOT?: RecyclingScalarWhereWithAggregatesInput | RecyclingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recycling"> | string
    user_id?: StringWithAggregatesFilter<"Recycling"> | string
    collect_point_id?: StringNullableWithAggregatesFilter<"Recycling"> | string | null
    number_of_bottles?: IntWithAggregatesFilter<"Recycling"> | number
    total_bottles_score?: IntWithAggregatesFilter<"Recycling"> | number
    created_at?: DateTimeWithAggregatesFilter<"Recycling"> | Date | string
    end_at?: DateTimeNullableWithAggregatesFilter<"Recycling"> | Date | string | null
  }

  export type BottlesWhereInput = {
    AND?: BottlesWhereInput | BottlesWhereInput[]
    OR?: BottlesWhereInput[]
    NOT?: BottlesWhereInput | BottlesWhereInput[]
    id?: StringFilter<"Bottles"> | string
    recycling_id?: StringFilter<"Bottles"> | string
    level?: IntFilter<"Bottles"> | number
    points?: IntFilter<"Bottles"> | number
    created_at?: DateTimeFilter<"Bottles"> | Date | string
    recycling?: XOR<RecyclingRelationFilter, RecyclingWhereInput>
  }

  export type BottlesOrderByWithRelationInput = {
    id?: SortOrder
    recycling_id?: SortOrder
    level?: SortOrder
    points?: SortOrder
    created_at?: SortOrder
    recycling?: RecyclingOrderByWithRelationInput
  }

  export type BottlesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BottlesWhereInput | BottlesWhereInput[]
    OR?: BottlesWhereInput[]
    NOT?: BottlesWhereInput | BottlesWhereInput[]
    recycling_id?: StringFilter<"Bottles"> | string
    level?: IntFilter<"Bottles"> | number
    points?: IntFilter<"Bottles"> | number
    created_at?: DateTimeFilter<"Bottles"> | Date | string
    recycling?: XOR<RecyclingRelationFilter, RecyclingWhereInput>
  }, "id">

  export type BottlesOrderByWithAggregationInput = {
    id?: SortOrder
    recycling_id?: SortOrder
    level?: SortOrder
    points?: SortOrder
    created_at?: SortOrder
    _count?: BottlesCountOrderByAggregateInput
    _avg?: BottlesAvgOrderByAggregateInput
    _max?: BottlesMaxOrderByAggregateInput
    _min?: BottlesMinOrderByAggregateInput
    _sum?: BottlesSumOrderByAggregateInput
  }

  export type BottlesScalarWhereWithAggregatesInput = {
    AND?: BottlesScalarWhereWithAggregatesInput | BottlesScalarWhereWithAggregatesInput[]
    OR?: BottlesScalarWhereWithAggregatesInput[]
    NOT?: BottlesScalarWhereWithAggregatesInput | BottlesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bottles"> | string
    recycling_id?: StringWithAggregatesFilter<"Bottles"> | string
    level?: IntWithAggregatesFilter<"Bottles"> | number
    points?: IntWithAggregatesFilter<"Bottles"> | number
    created_at?: DateTimeWithAggregatesFilter<"Bottles"> | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensCreateNestedOneWithoutUserInput
    profile: ProfilesCreateNestedOneWithoutUsersInput
    level?: LevelsCreateNestedOneWithoutUsersInput
    recycling?: RecyclingCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    profile_id: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensUncheckedCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensUncheckedCreateNestedOneWithoutUserInput
    recycling?: RecyclingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUpdateOneWithoutUserNestedInput
    profile?: ProfilesUpdateOneRequiredWithoutUsersNestedInput
    level?: LevelsUpdateOneWithoutUsersNestedInput
    recycling?: RecyclingUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUncheckedUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUncheckedUpdateOneWithoutUserNestedInput
    recycling?: RecyclingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    profile_id: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesCreateInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
    levels?: LevelsCreateNestedManyWithoutProfileInput
    users?: UsersCreateNestedManyWithoutProfileInput
  }

  export type ProfilesUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
    levels?: LevelsUncheckedCreateNestedManyWithoutProfileInput
    users?: UsersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfilesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    levels?: LevelsUpdateManyWithoutProfileNestedInput
    users?: UsersUpdateManyWithoutProfileNestedInput
  }

  export type ProfilesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    levels?: LevelsUncheckedUpdateManyWithoutProfileNestedInput
    users?: UsersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfilesCreateManyInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
  }

  export type ProfilesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvalidTokensCreateInput = {
    token: string
    invalidated_at?: Date | string
    user: UsersCreateNestedOneWithoutInvalid_tokensInput
  }

  export type InvalidTokensUncheckedCreateInput = {
    id?: number
    user_id: string
    token: string
    invalidated_at?: Date | string
  }

  export type InvalidTokensUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutInvalid_tokensNestedInput
  }

  export type InvalidTokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvalidTokensCreateManyInput = {
    id?: number
    user_id: string
    token: string
    invalidated_at?: Date | string
  }

  export type InvalidTokensUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvalidTokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokensCreateInput = {
    token: string
    expires_at: Date | string
    user: UsersCreateNestedOneWithoutReset_tokenInput
  }

  export type ResetTokensUncheckedCreateInput = {
    id?: number
    user_id: string
    token: string
    expires_at: Date | string
  }

  export type ResetTokensUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutReset_tokenNestedInput
  }

  export type ResetTokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokensCreateManyInput = {
    id?: number
    user_id: string
    token: string
    expires_at: Date | string
  }

  export type ResetTokensUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelsCreateInput = {
    id?: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    profile: ProfilesCreateNestedOneWithoutLevelsInput
    level_rewards?: LevelRewardsCreateNestedManyWithoutLevelInput
    users?: UsersCreateNestedManyWithoutLevelInput
  }

  export type LevelsUncheckedCreateInput = {
    id?: string
    profile_id: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    level_rewards?: LevelRewardsUncheckedCreateNestedManyWithoutLevelInput
    users?: UsersUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    profile?: ProfilesUpdateOneRequiredWithoutLevelsNestedInput
    level_rewards?: LevelRewardsUpdateManyWithoutLevelNestedInput
    users?: UsersUpdateManyWithoutLevelNestedInput
  }

  export type LevelsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    level_rewards?: LevelRewardsUncheckedUpdateManyWithoutLevelNestedInput
    users?: UsersUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelsCreateManyInput = {
    id?: string
    profile_id: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
  }

  export type LevelsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type LevelsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type LevelRewardsCreateInput = {
    id?: string
    name: string
    description: string
    image: string
    unlocked_at?: Date | string | null
    level: LevelsCreateNestedOneWithoutLevel_rewardsInput
  }

  export type LevelRewardsUncheckedCreateInput = {
    id?: string
    level_id: string
    name: string
    description: string
    image: string
    unlocked_at?: Date | string | null
  }

  export type LevelRewardsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    level?: LevelsUpdateOneRequiredWithoutLevel_rewardsNestedInput
  }

  export type LevelRewardsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LevelRewardsCreateManyInput = {
    id?: string
    level_id: string
    name: string
    description: string
    image: string
    unlocked_at?: Date | string | null
  }

  export type LevelRewardsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LevelRewardsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    level_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CollectionPointsCreateInput = {
    id?: string
    mac_address: string
    image: string
    name: string
    email: string
    whatsapp: string
    latitude: number
    longitude: number
    city: string
    uf: string
    recycling?: RecyclingCreateNestedManyWithoutCollect_pointInput
  }

  export type CollectionPointsUncheckedCreateInput = {
    id?: string
    mac_address: string
    image: string
    name: string
    email: string
    whatsapp: string
    latitude: number
    longitude: number
    city: string
    uf: string
    recycling?: RecyclingUncheckedCreateNestedManyWithoutCollect_pointInput
  }

  export type CollectionPointsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mac_address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    recycling?: RecyclingUpdateManyWithoutCollect_pointNestedInput
  }

  export type CollectionPointsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mac_address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    recycling?: RecyclingUncheckedUpdateManyWithoutCollect_pointNestedInput
  }

  export type CollectionPointsCreateManyInput = {
    id?: string
    mac_address: string
    image: string
    name: string
    email: string
    whatsapp: string
    latitude: number
    longitude: number
    city: string
    uf: string
  }

  export type CollectionPointsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mac_address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionPointsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mac_address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type RecyclingCreateInput = {
    id?: string
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    user: UsersCreateNestedOneWithoutRecyclingInput
    collect_point?: CollectionPointsCreateNestedOneWithoutRecyclingInput
    Bottles?: BottlesCreateNestedManyWithoutRecyclingInput
  }

  export type RecyclingUncheckedCreateInput = {
    id?: string
    user_id: string
    collect_point_id?: string | null
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    Bottles?: BottlesUncheckedCreateNestedManyWithoutRecyclingInput
  }

  export type RecyclingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UsersUpdateOneRequiredWithoutRecyclingNestedInput
    collect_point?: CollectionPointsUpdateOneWithoutRecyclingNestedInput
    Bottles?: BottlesUpdateManyWithoutRecyclingNestedInput
  }

  export type RecyclingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    collect_point_id?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Bottles?: BottlesUncheckedUpdateManyWithoutRecyclingNestedInput
  }

  export type RecyclingCreateManyInput = {
    id?: string
    user_id: string
    collect_point_id?: string | null
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
  }

  export type RecyclingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecyclingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    collect_point_id?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BottlesCreateInput = {
    id?: string
    level: number
    points: number
    created_at?: Date | string
    recycling: RecyclingCreateNestedOneWithoutBottlesInput
  }

  export type BottlesUncheckedCreateInput = {
    id?: string
    recycling_id: string
    level: number
    points: number
    created_at?: Date | string
  }

  export type BottlesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    recycling?: RecyclingUpdateOneRequiredWithoutBottlesNestedInput
  }

  export type BottlesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recycling_id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BottlesCreateManyInput = {
    id?: string
    recycling_id: string
    level: number
    points: number
    created_at?: Date | string
  }

  export type BottlesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BottlesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recycling_id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type InvalidTokensListRelationFilter = {
    every?: InvalidTokensWhereInput
    some?: InvalidTokensWhereInput
    none?: InvalidTokensWhereInput
  }

  export type ResetTokensNullableRelationFilter = {
    is?: ResetTokensWhereInput | null
    isNot?: ResetTokensWhereInput | null
  }

  export type ProfilesRelationFilter = {
    is?: ProfilesWhereInput
    isNot?: ProfilesWhereInput
  }

  export type LevelsNullableRelationFilter = {
    is?: LevelsWhereInput | null
    isNot?: LevelsWhereInput | null
  }

  export type RecyclingListRelationFilter = {
    every?: RecyclingWhereInput
    some?: RecyclingWhereInput
    none?: RecyclingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InvalidTokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecyclingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    level_id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    level_id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    level_id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LevelsListRelationFilter = {
    every?: LevelsWhereInput
    some?: LevelsWhereInput
    none?: LevelsWhereInput
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type LevelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfilesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
  }

  export type ProfilesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
  }

  export type ProfilesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type InvalidTokensCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    invalidated_at?: SortOrder
  }

  export type InvalidTokensAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InvalidTokensMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    invalidated_at?: SortOrder
  }

  export type InvalidTokensMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    invalidated_at?: SortOrder
  }

  export type InvalidTokensSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ResetTokensCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
  }

  export type ResetTokensAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResetTokensMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
  }

  export type ResetTokensMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
  }

  export type ResetTokensSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type LevelRewardsListRelationFilter = {
    every?: LevelRewardsWhereInput
    some?: LevelRewardsWhereInput
    none?: LevelRewardsWhereInput
  }

  export type LevelRewardsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LevelsCountOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    required_score?: SortOrder
    position?: SortOrder
    created_at?: SortOrder
    unlocked?: SortOrder
  }

  export type LevelsAvgOrderByAggregateInput = {
    required_score?: SortOrder
    position?: SortOrder
  }

  export type LevelsMaxOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    required_score?: SortOrder
    position?: SortOrder
    created_at?: SortOrder
    unlocked?: SortOrder
  }

  export type LevelsMinOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    required_score?: SortOrder
    position?: SortOrder
    created_at?: SortOrder
    unlocked?: SortOrder
  }

  export type LevelsSumOrderByAggregateInput = {
    required_score?: SortOrder
    position?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LevelsRelationFilter = {
    is?: LevelsWhereInput
    isNot?: LevelsWhereInput
  }

  export type LevelRewardsCountOrderByAggregateInput = {
    id?: SortOrder
    level_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    unlocked_at?: SortOrder
  }

  export type LevelRewardsMaxOrderByAggregateInput = {
    id?: SortOrder
    level_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    unlocked_at?: SortOrder
  }

  export type LevelRewardsMinOrderByAggregateInput = {
    id?: SortOrder
    level_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    unlocked_at?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CollectionPointsCountOrderByAggregateInput = {
    id?: SortOrder
    mac_address?: SortOrder
    image?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    city?: SortOrder
    uf?: SortOrder
  }

  export type CollectionPointsAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type CollectionPointsMaxOrderByAggregateInput = {
    id?: SortOrder
    mac_address?: SortOrder
    image?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    city?: SortOrder
    uf?: SortOrder
  }

  export type CollectionPointsMinOrderByAggregateInput = {
    id?: SortOrder
    mac_address?: SortOrder
    image?: SortOrder
    name?: SortOrder
    email?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    city?: SortOrder
    uf?: SortOrder
  }

  export type CollectionPointsSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CollectionPointsNullableRelationFilter = {
    is?: CollectionPointsWhereInput | null
    isNot?: CollectionPointsWhereInput | null
  }

  export type BottlesListRelationFilter = {
    every?: BottlesWhereInput
    some?: BottlesWhereInput
    none?: BottlesWhereInput
  }

  export type BottlesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecyclingCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    collect_point_id?: SortOrder
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type RecyclingAvgOrderByAggregateInput = {
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
  }

  export type RecyclingMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    collect_point_id?: SortOrder
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type RecyclingMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    collect_point_id?: SortOrder
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type RecyclingSumOrderByAggregateInput = {
    number_of_bottles?: SortOrder
    total_bottles_score?: SortOrder
  }

  export type RecyclingRelationFilter = {
    is?: RecyclingWhereInput
    isNot?: RecyclingWhereInput
  }

  export type BottlesCountOrderByAggregateInput = {
    id?: SortOrder
    recycling_id?: SortOrder
    level?: SortOrder
    points?: SortOrder
    created_at?: SortOrder
  }

  export type BottlesAvgOrderByAggregateInput = {
    level?: SortOrder
    points?: SortOrder
  }

  export type BottlesMaxOrderByAggregateInput = {
    id?: SortOrder
    recycling_id?: SortOrder
    level?: SortOrder
    points?: SortOrder
    created_at?: SortOrder
  }

  export type BottlesMinOrderByAggregateInput = {
    id?: SortOrder
    recycling_id?: SortOrder
    level?: SortOrder
    points?: SortOrder
    created_at?: SortOrder
  }

  export type BottlesSumOrderByAggregateInput = {
    level?: SortOrder
    points?: SortOrder
  }

  export type InvalidTokensCreateNestedManyWithoutUserInput = {
    create?: XOR<InvalidTokensCreateWithoutUserInput, InvalidTokensUncheckedCreateWithoutUserInput> | InvalidTokensCreateWithoutUserInput[] | InvalidTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvalidTokensCreateOrConnectWithoutUserInput | InvalidTokensCreateOrConnectWithoutUserInput[]
    createMany?: InvalidTokensCreateManyUserInputEnvelope
    connect?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
  }

  export type ResetTokensCreateNestedOneWithoutUserInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput
    connect?: ResetTokensWhereUniqueInput
  }

  export type ProfilesCreateNestedOneWithoutUsersInput = {
    create?: XOR<ProfilesCreateWithoutUsersInput, ProfilesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUsersInput
    connect?: ProfilesWhereUniqueInput
  }

  export type LevelsCreateNestedOneWithoutUsersInput = {
    create?: XOR<LevelsCreateWithoutUsersInput, LevelsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: LevelsCreateOrConnectWithoutUsersInput
    connect?: LevelsWhereUniqueInput
  }

  export type RecyclingCreateNestedManyWithoutUserInput = {
    create?: XOR<RecyclingCreateWithoutUserInput, RecyclingUncheckedCreateWithoutUserInput> | RecyclingCreateWithoutUserInput[] | RecyclingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutUserInput | RecyclingCreateOrConnectWithoutUserInput[]
    createMany?: RecyclingCreateManyUserInputEnvelope
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
  }

  export type InvalidTokensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvalidTokensCreateWithoutUserInput, InvalidTokensUncheckedCreateWithoutUserInput> | InvalidTokensCreateWithoutUserInput[] | InvalidTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvalidTokensCreateOrConnectWithoutUserInput | InvalidTokensCreateOrConnectWithoutUserInput[]
    createMany?: InvalidTokensCreateManyUserInputEnvelope
    connect?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
  }

  export type ResetTokensUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput
    connect?: ResetTokensWhereUniqueInput
  }

  export type RecyclingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecyclingCreateWithoutUserInput, RecyclingUncheckedCreateWithoutUserInput> | RecyclingCreateWithoutUserInput[] | RecyclingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutUserInput | RecyclingCreateOrConnectWithoutUserInput[]
    createMany?: RecyclingCreateManyUserInputEnvelope
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type InvalidTokensUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvalidTokensCreateWithoutUserInput, InvalidTokensUncheckedCreateWithoutUserInput> | InvalidTokensCreateWithoutUserInput[] | InvalidTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvalidTokensCreateOrConnectWithoutUserInput | InvalidTokensCreateOrConnectWithoutUserInput[]
    upsert?: InvalidTokensUpsertWithWhereUniqueWithoutUserInput | InvalidTokensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvalidTokensCreateManyUserInputEnvelope
    set?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    disconnect?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    delete?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    connect?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    update?: InvalidTokensUpdateWithWhereUniqueWithoutUserInput | InvalidTokensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvalidTokensUpdateManyWithWhereWithoutUserInput | InvalidTokensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvalidTokensScalarWhereInput | InvalidTokensScalarWhereInput[]
  }

  export type ResetTokensUpdateOneWithoutUserNestedInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput
    upsert?: ResetTokensUpsertWithoutUserInput
    disconnect?: ResetTokensWhereInput | boolean
    delete?: ResetTokensWhereInput | boolean
    connect?: ResetTokensWhereUniqueInput
    update?: XOR<XOR<ResetTokensUpdateToOneWithWhereWithoutUserInput, ResetTokensUpdateWithoutUserInput>, ResetTokensUncheckedUpdateWithoutUserInput>
  }

  export type ProfilesUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ProfilesCreateWithoutUsersInput, ProfilesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUsersInput
    upsert?: ProfilesUpsertWithoutUsersInput
    connect?: ProfilesWhereUniqueInput
    update?: XOR<XOR<ProfilesUpdateToOneWithWhereWithoutUsersInput, ProfilesUpdateWithoutUsersInput>, ProfilesUncheckedUpdateWithoutUsersInput>
  }

  export type LevelsUpdateOneWithoutUsersNestedInput = {
    create?: XOR<LevelsCreateWithoutUsersInput, LevelsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: LevelsCreateOrConnectWithoutUsersInput
    upsert?: LevelsUpsertWithoutUsersInput
    disconnect?: LevelsWhereInput | boolean
    delete?: LevelsWhereInput | boolean
    connect?: LevelsWhereUniqueInput
    update?: XOR<XOR<LevelsUpdateToOneWithWhereWithoutUsersInput, LevelsUpdateWithoutUsersInput>, LevelsUncheckedUpdateWithoutUsersInput>
  }

  export type RecyclingUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecyclingCreateWithoutUserInput, RecyclingUncheckedCreateWithoutUserInput> | RecyclingCreateWithoutUserInput[] | RecyclingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutUserInput | RecyclingCreateOrConnectWithoutUserInput[]
    upsert?: RecyclingUpsertWithWhereUniqueWithoutUserInput | RecyclingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecyclingCreateManyUserInputEnvelope
    set?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    disconnect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    delete?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    update?: RecyclingUpdateWithWhereUniqueWithoutUserInput | RecyclingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecyclingUpdateManyWithWhereWithoutUserInput | RecyclingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecyclingScalarWhereInput | RecyclingScalarWhereInput[]
  }

  export type InvalidTokensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvalidTokensCreateWithoutUserInput, InvalidTokensUncheckedCreateWithoutUserInput> | InvalidTokensCreateWithoutUserInput[] | InvalidTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvalidTokensCreateOrConnectWithoutUserInput | InvalidTokensCreateOrConnectWithoutUserInput[]
    upsert?: InvalidTokensUpsertWithWhereUniqueWithoutUserInput | InvalidTokensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvalidTokensCreateManyUserInputEnvelope
    set?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    disconnect?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    delete?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    connect?: InvalidTokensWhereUniqueInput | InvalidTokensWhereUniqueInput[]
    update?: InvalidTokensUpdateWithWhereUniqueWithoutUserInput | InvalidTokensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvalidTokensUpdateManyWithWhereWithoutUserInput | InvalidTokensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvalidTokensScalarWhereInput | InvalidTokensScalarWhereInput[]
  }

  export type ResetTokensUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput
    upsert?: ResetTokensUpsertWithoutUserInput
    disconnect?: ResetTokensWhereInput | boolean
    delete?: ResetTokensWhereInput | boolean
    connect?: ResetTokensWhereUniqueInput
    update?: XOR<XOR<ResetTokensUpdateToOneWithWhereWithoutUserInput, ResetTokensUpdateWithoutUserInput>, ResetTokensUncheckedUpdateWithoutUserInput>
  }

  export type RecyclingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecyclingCreateWithoutUserInput, RecyclingUncheckedCreateWithoutUserInput> | RecyclingCreateWithoutUserInput[] | RecyclingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutUserInput | RecyclingCreateOrConnectWithoutUserInput[]
    upsert?: RecyclingUpsertWithWhereUniqueWithoutUserInput | RecyclingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecyclingCreateManyUserInputEnvelope
    set?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    disconnect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    delete?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    update?: RecyclingUpdateWithWhereUniqueWithoutUserInput | RecyclingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecyclingUpdateManyWithWhereWithoutUserInput | RecyclingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecyclingScalarWhereInput | RecyclingScalarWhereInput[]
  }

  export type LevelsCreateNestedManyWithoutProfileInput = {
    create?: XOR<LevelsCreateWithoutProfileInput, LevelsUncheckedCreateWithoutProfileInput> | LevelsCreateWithoutProfileInput[] | LevelsUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LevelsCreateOrConnectWithoutProfileInput | LevelsCreateOrConnectWithoutProfileInput[]
    createMany?: LevelsCreateManyProfileInputEnvelope
    connect?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutProfileInput = {
    create?: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput> | UsersCreateWithoutProfileInput[] | UsersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProfileInput | UsersCreateOrConnectWithoutProfileInput[]
    createMany?: UsersCreateManyProfileInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type LevelsUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<LevelsCreateWithoutProfileInput, LevelsUncheckedCreateWithoutProfileInput> | LevelsCreateWithoutProfileInput[] | LevelsUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LevelsCreateOrConnectWithoutProfileInput | LevelsCreateOrConnectWithoutProfileInput[]
    createMany?: LevelsCreateManyProfileInputEnvelope
    connect?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput> | UsersCreateWithoutProfileInput[] | UsersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProfileInput | UsersCreateOrConnectWithoutProfileInput[]
    createMany?: UsersCreateManyProfileInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type LevelsUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LevelsCreateWithoutProfileInput, LevelsUncheckedCreateWithoutProfileInput> | LevelsCreateWithoutProfileInput[] | LevelsUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LevelsCreateOrConnectWithoutProfileInput | LevelsCreateOrConnectWithoutProfileInput[]
    upsert?: LevelsUpsertWithWhereUniqueWithoutProfileInput | LevelsUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LevelsCreateManyProfileInputEnvelope
    set?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    disconnect?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    delete?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    connect?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    update?: LevelsUpdateWithWhereUniqueWithoutProfileInput | LevelsUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LevelsUpdateManyWithWhereWithoutProfileInput | LevelsUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LevelsScalarWhereInput | LevelsScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput> | UsersCreateWithoutProfileInput[] | UsersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProfileInput | UsersCreateOrConnectWithoutProfileInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutProfileInput | UsersUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UsersCreateManyProfileInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutProfileInput | UsersUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutProfileInput | UsersUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type LevelsUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LevelsCreateWithoutProfileInput, LevelsUncheckedCreateWithoutProfileInput> | LevelsCreateWithoutProfileInput[] | LevelsUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LevelsCreateOrConnectWithoutProfileInput | LevelsCreateOrConnectWithoutProfileInput[]
    upsert?: LevelsUpsertWithWhereUniqueWithoutProfileInput | LevelsUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LevelsCreateManyProfileInputEnvelope
    set?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    disconnect?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    delete?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    connect?: LevelsWhereUniqueInput | LevelsWhereUniqueInput[]
    update?: LevelsUpdateWithWhereUniqueWithoutProfileInput | LevelsUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LevelsUpdateManyWithWhereWithoutProfileInput | LevelsUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LevelsScalarWhereInput | LevelsScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput> | UsersCreateWithoutProfileInput[] | UsersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProfileInput | UsersCreateOrConnectWithoutProfileInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutProfileInput | UsersUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UsersCreateManyProfileInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutProfileInput | UsersUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutProfileInput | UsersUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutInvalid_tokensInput = {
    create?: XOR<UsersCreateWithoutInvalid_tokensInput, UsersUncheckedCreateWithoutInvalid_tokensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutInvalid_tokensInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutInvalid_tokensNestedInput = {
    create?: XOR<UsersCreateWithoutInvalid_tokensInput, UsersUncheckedCreateWithoutInvalid_tokensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutInvalid_tokensInput
    upsert?: UsersUpsertWithoutInvalid_tokensInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutInvalid_tokensInput, UsersUpdateWithoutInvalid_tokensInput>, UsersUncheckedUpdateWithoutInvalid_tokensInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersCreateNestedOneWithoutReset_tokenInput = {
    create?: XOR<UsersCreateWithoutReset_tokenInput, UsersUncheckedCreateWithoutReset_tokenInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReset_tokenInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutReset_tokenNestedInput = {
    create?: XOR<UsersCreateWithoutReset_tokenInput, UsersUncheckedCreateWithoutReset_tokenInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReset_tokenInput
    upsert?: UsersUpsertWithoutReset_tokenInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutReset_tokenInput, UsersUpdateWithoutReset_tokenInput>, UsersUncheckedUpdateWithoutReset_tokenInput>
  }

  export type ProfilesCreateNestedOneWithoutLevelsInput = {
    create?: XOR<ProfilesCreateWithoutLevelsInput, ProfilesUncheckedCreateWithoutLevelsInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutLevelsInput
    connect?: ProfilesWhereUniqueInput
  }

  export type LevelRewardsCreateNestedManyWithoutLevelInput = {
    create?: XOR<LevelRewardsCreateWithoutLevelInput, LevelRewardsUncheckedCreateWithoutLevelInput> | LevelRewardsCreateWithoutLevelInput[] | LevelRewardsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelRewardsCreateOrConnectWithoutLevelInput | LevelRewardsCreateOrConnectWithoutLevelInput[]
    createMany?: LevelRewardsCreateManyLevelInputEnvelope
    connect?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutLevelInput = {
    create?: XOR<UsersCreateWithoutLevelInput, UsersUncheckedCreateWithoutLevelInput> | UsersCreateWithoutLevelInput[] | UsersUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutLevelInput | UsersCreateOrConnectWithoutLevelInput[]
    createMany?: UsersCreateManyLevelInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type LevelRewardsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<LevelRewardsCreateWithoutLevelInput, LevelRewardsUncheckedCreateWithoutLevelInput> | LevelRewardsCreateWithoutLevelInput[] | LevelRewardsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelRewardsCreateOrConnectWithoutLevelInput | LevelRewardsCreateOrConnectWithoutLevelInput[]
    createMany?: LevelRewardsCreateManyLevelInputEnvelope
    connect?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<UsersCreateWithoutLevelInput, UsersUncheckedCreateWithoutLevelInput> | UsersCreateWithoutLevelInput[] | UsersUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutLevelInput | UsersCreateOrConnectWithoutLevelInput[]
    createMany?: UsersCreateManyLevelInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ProfilesUpdateOneRequiredWithoutLevelsNestedInput = {
    create?: XOR<ProfilesCreateWithoutLevelsInput, ProfilesUncheckedCreateWithoutLevelsInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutLevelsInput
    upsert?: ProfilesUpsertWithoutLevelsInput
    connect?: ProfilesWhereUniqueInput
    update?: XOR<XOR<ProfilesUpdateToOneWithWhereWithoutLevelsInput, ProfilesUpdateWithoutLevelsInput>, ProfilesUncheckedUpdateWithoutLevelsInput>
  }

  export type LevelRewardsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<LevelRewardsCreateWithoutLevelInput, LevelRewardsUncheckedCreateWithoutLevelInput> | LevelRewardsCreateWithoutLevelInput[] | LevelRewardsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelRewardsCreateOrConnectWithoutLevelInput | LevelRewardsCreateOrConnectWithoutLevelInput[]
    upsert?: LevelRewardsUpsertWithWhereUniqueWithoutLevelInput | LevelRewardsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: LevelRewardsCreateManyLevelInputEnvelope
    set?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    disconnect?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    delete?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    connect?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    update?: LevelRewardsUpdateWithWhereUniqueWithoutLevelInput | LevelRewardsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: LevelRewardsUpdateManyWithWhereWithoutLevelInput | LevelRewardsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: LevelRewardsScalarWhereInput | LevelRewardsScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutLevelNestedInput = {
    create?: XOR<UsersCreateWithoutLevelInput, UsersUncheckedCreateWithoutLevelInput> | UsersCreateWithoutLevelInput[] | UsersUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutLevelInput | UsersCreateOrConnectWithoutLevelInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutLevelInput | UsersUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: UsersCreateManyLevelInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutLevelInput | UsersUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutLevelInput | UsersUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type LevelRewardsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<LevelRewardsCreateWithoutLevelInput, LevelRewardsUncheckedCreateWithoutLevelInput> | LevelRewardsCreateWithoutLevelInput[] | LevelRewardsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: LevelRewardsCreateOrConnectWithoutLevelInput | LevelRewardsCreateOrConnectWithoutLevelInput[]
    upsert?: LevelRewardsUpsertWithWhereUniqueWithoutLevelInput | LevelRewardsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: LevelRewardsCreateManyLevelInputEnvelope
    set?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    disconnect?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    delete?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    connect?: LevelRewardsWhereUniqueInput | LevelRewardsWhereUniqueInput[]
    update?: LevelRewardsUpdateWithWhereUniqueWithoutLevelInput | LevelRewardsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: LevelRewardsUpdateManyWithWhereWithoutLevelInput | LevelRewardsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: LevelRewardsScalarWhereInput | LevelRewardsScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<UsersCreateWithoutLevelInput, UsersUncheckedCreateWithoutLevelInput> | UsersCreateWithoutLevelInput[] | UsersUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutLevelInput | UsersCreateOrConnectWithoutLevelInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutLevelInput | UsersUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: UsersCreateManyLevelInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutLevelInput | UsersUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutLevelInput | UsersUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type LevelsCreateNestedOneWithoutLevel_rewardsInput = {
    create?: XOR<LevelsCreateWithoutLevel_rewardsInput, LevelsUncheckedCreateWithoutLevel_rewardsInput>
    connectOrCreate?: LevelsCreateOrConnectWithoutLevel_rewardsInput
    connect?: LevelsWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type LevelsUpdateOneRequiredWithoutLevel_rewardsNestedInput = {
    create?: XOR<LevelsCreateWithoutLevel_rewardsInput, LevelsUncheckedCreateWithoutLevel_rewardsInput>
    connectOrCreate?: LevelsCreateOrConnectWithoutLevel_rewardsInput
    upsert?: LevelsUpsertWithoutLevel_rewardsInput
    connect?: LevelsWhereUniqueInput
    update?: XOR<XOR<LevelsUpdateToOneWithWhereWithoutLevel_rewardsInput, LevelsUpdateWithoutLevel_rewardsInput>, LevelsUncheckedUpdateWithoutLevel_rewardsInput>
  }

  export type RecyclingCreateNestedManyWithoutCollect_pointInput = {
    create?: XOR<RecyclingCreateWithoutCollect_pointInput, RecyclingUncheckedCreateWithoutCollect_pointInput> | RecyclingCreateWithoutCollect_pointInput[] | RecyclingUncheckedCreateWithoutCollect_pointInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutCollect_pointInput | RecyclingCreateOrConnectWithoutCollect_pointInput[]
    createMany?: RecyclingCreateManyCollect_pointInputEnvelope
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
  }

  export type RecyclingUncheckedCreateNestedManyWithoutCollect_pointInput = {
    create?: XOR<RecyclingCreateWithoutCollect_pointInput, RecyclingUncheckedCreateWithoutCollect_pointInput> | RecyclingCreateWithoutCollect_pointInput[] | RecyclingUncheckedCreateWithoutCollect_pointInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutCollect_pointInput | RecyclingCreateOrConnectWithoutCollect_pointInput[]
    createMany?: RecyclingCreateManyCollect_pointInputEnvelope
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RecyclingUpdateManyWithoutCollect_pointNestedInput = {
    create?: XOR<RecyclingCreateWithoutCollect_pointInput, RecyclingUncheckedCreateWithoutCollect_pointInput> | RecyclingCreateWithoutCollect_pointInput[] | RecyclingUncheckedCreateWithoutCollect_pointInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutCollect_pointInput | RecyclingCreateOrConnectWithoutCollect_pointInput[]
    upsert?: RecyclingUpsertWithWhereUniqueWithoutCollect_pointInput | RecyclingUpsertWithWhereUniqueWithoutCollect_pointInput[]
    createMany?: RecyclingCreateManyCollect_pointInputEnvelope
    set?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    disconnect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    delete?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    update?: RecyclingUpdateWithWhereUniqueWithoutCollect_pointInput | RecyclingUpdateWithWhereUniqueWithoutCollect_pointInput[]
    updateMany?: RecyclingUpdateManyWithWhereWithoutCollect_pointInput | RecyclingUpdateManyWithWhereWithoutCollect_pointInput[]
    deleteMany?: RecyclingScalarWhereInput | RecyclingScalarWhereInput[]
  }

  export type RecyclingUncheckedUpdateManyWithoutCollect_pointNestedInput = {
    create?: XOR<RecyclingCreateWithoutCollect_pointInput, RecyclingUncheckedCreateWithoutCollect_pointInput> | RecyclingCreateWithoutCollect_pointInput[] | RecyclingUncheckedCreateWithoutCollect_pointInput[]
    connectOrCreate?: RecyclingCreateOrConnectWithoutCollect_pointInput | RecyclingCreateOrConnectWithoutCollect_pointInput[]
    upsert?: RecyclingUpsertWithWhereUniqueWithoutCollect_pointInput | RecyclingUpsertWithWhereUniqueWithoutCollect_pointInput[]
    createMany?: RecyclingCreateManyCollect_pointInputEnvelope
    set?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    disconnect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    delete?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    connect?: RecyclingWhereUniqueInput | RecyclingWhereUniqueInput[]
    update?: RecyclingUpdateWithWhereUniqueWithoutCollect_pointInput | RecyclingUpdateWithWhereUniqueWithoutCollect_pointInput[]
    updateMany?: RecyclingUpdateManyWithWhereWithoutCollect_pointInput | RecyclingUpdateManyWithWhereWithoutCollect_pointInput[]
    deleteMany?: RecyclingScalarWhereInput | RecyclingScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutRecyclingInput = {
    create?: XOR<UsersCreateWithoutRecyclingInput, UsersUncheckedCreateWithoutRecyclingInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecyclingInput
    connect?: UsersWhereUniqueInput
  }

  export type CollectionPointsCreateNestedOneWithoutRecyclingInput = {
    create?: XOR<CollectionPointsCreateWithoutRecyclingInput, CollectionPointsUncheckedCreateWithoutRecyclingInput>
    connectOrCreate?: CollectionPointsCreateOrConnectWithoutRecyclingInput
    connect?: CollectionPointsWhereUniqueInput
  }

  export type BottlesCreateNestedManyWithoutRecyclingInput = {
    create?: XOR<BottlesCreateWithoutRecyclingInput, BottlesUncheckedCreateWithoutRecyclingInput> | BottlesCreateWithoutRecyclingInput[] | BottlesUncheckedCreateWithoutRecyclingInput[]
    connectOrCreate?: BottlesCreateOrConnectWithoutRecyclingInput | BottlesCreateOrConnectWithoutRecyclingInput[]
    createMany?: BottlesCreateManyRecyclingInputEnvelope
    connect?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
  }

  export type BottlesUncheckedCreateNestedManyWithoutRecyclingInput = {
    create?: XOR<BottlesCreateWithoutRecyclingInput, BottlesUncheckedCreateWithoutRecyclingInput> | BottlesCreateWithoutRecyclingInput[] | BottlesUncheckedCreateWithoutRecyclingInput[]
    connectOrCreate?: BottlesCreateOrConnectWithoutRecyclingInput | BottlesCreateOrConnectWithoutRecyclingInput[]
    createMany?: BottlesCreateManyRecyclingInputEnvelope
    connect?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutRecyclingNestedInput = {
    create?: XOR<UsersCreateWithoutRecyclingInput, UsersUncheckedCreateWithoutRecyclingInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecyclingInput
    upsert?: UsersUpsertWithoutRecyclingInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRecyclingInput, UsersUpdateWithoutRecyclingInput>, UsersUncheckedUpdateWithoutRecyclingInput>
  }

  export type CollectionPointsUpdateOneWithoutRecyclingNestedInput = {
    create?: XOR<CollectionPointsCreateWithoutRecyclingInput, CollectionPointsUncheckedCreateWithoutRecyclingInput>
    connectOrCreate?: CollectionPointsCreateOrConnectWithoutRecyclingInput
    upsert?: CollectionPointsUpsertWithoutRecyclingInput
    disconnect?: CollectionPointsWhereInput | boolean
    delete?: CollectionPointsWhereInput | boolean
    connect?: CollectionPointsWhereUniqueInput
    update?: XOR<XOR<CollectionPointsUpdateToOneWithWhereWithoutRecyclingInput, CollectionPointsUpdateWithoutRecyclingInput>, CollectionPointsUncheckedUpdateWithoutRecyclingInput>
  }

  export type BottlesUpdateManyWithoutRecyclingNestedInput = {
    create?: XOR<BottlesCreateWithoutRecyclingInput, BottlesUncheckedCreateWithoutRecyclingInput> | BottlesCreateWithoutRecyclingInput[] | BottlesUncheckedCreateWithoutRecyclingInput[]
    connectOrCreate?: BottlesCreateOrConnectWithoutRecyclingInput | BottlesCreateOrConnectWithoutRecyclingInput[]
    upsert?: BottlesUpsertWithWhereUniqueWithoutRecyclingInput | BottlesUpsertWithWhereUniqueWithoutRecyclingInput[]
    createMany?: BottlesCreateManyRecyclingInputEnvelope
    set?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    disconnect?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    delete?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    connect?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    update?: BottlesUpdateWithWhereUniqueWithoutRecyclingInput | BottlesUpdateWithWhereUniqueWithoutRecyclingInput[]
    updateMany?: BottlesUpdateManyWithWhereWithoutRecyclingInput | BottlesUpdateManyWithWhereWithoutRecyclingInput[]
    deleteMany?: BottlesScalarWhereInput | BottlesScalarWhereInput[]
  }

  export type BottlesUncheckedUpdateManyWithoutRecyclingNestedInput = {
    create?: XOR<BottlesCreateWithoutRecyclingInput, BottlesUncheckedCreateWithoutRecyclingInput> | BottlesCreateWithoutRecyclingInput[] | BottlesUncheckedCreateWithoutRecyclingInput[]
    connectOrCreate?: BottlesCreateOrConnectWithoutRecyclingInput | BottlesCreateOrConnectWithoutRecyclingInput[]
    upsert?: BottlesUpsertWithWhereUniqueWithoutRecyclingInput | BottlesUpsertWithWhereUniqueWithoutRecyclingInput[]
    createMany?: BottlesCreateManyRecyclingInputEnvelope
    set?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    disconnect?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    delete?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    connect?: BottlesWhereUniqueInput | BottlesWhereUniqueInput[]
    update?: BottlesUpdateWithWhereUniqueWithoutRecyclingInput | BottlesUpdateWithWhereUniqueWithoutRecyclingInput[]
    updateMany?: BottlesUpdateManyWithWhereWithoutRecyclingInput | BottlesUpdateManyWithWhereWithoutRecyclingInput[]
    deleteMany?: BottlesScalarWhereInput | BottlesScalarWhereInput[]
  }

  export type RecyclingCreateNestedOneWithoutBottlesInput = {
    create?: XOR<RecyclingCreateWithoutBottlesInput, RecyclingUncheckedCreateWithoutBottlesInput>
    connectOrCreate?: RecyclingCreateOrConnectWithoutBottlesInput
    connect?: RecyclingWhereUniqueInput
  }

  export type RecyclingUpdateOneRequiredWithoutBottlesNestedInput = {
    create?: XOR<RecyclingCreateWithoutBottlesInput, RecyclingUncheckedCreateWithoutBottlesInput>
    connectOrCreate?: RecyclingCreateOrConnectWithoutBottlesInput
    upsert?: RecyclingUpsertWithoutBottlesInput
    connect?: RecyclingWhereUniqueInput
    update?: XOR<XOR<RecyclingUpdateToOneWithWhereWithoutBottlesInput, RecyclingUpdateWithoutBottlesInput>, RecyclingUncheckedUpdateWithoutBottlesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InvalidTokensCreateWithoutUserInput = {
    token: string
    invalidated_at?: Date | string
  }

  export type InvalidTokensUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    invalidated_at?: Date | string
  }

  export type InvalidTokensCreateOrConnectWithoutUserInput = {
    where: InvalidTokensWhereUniqueInput
    create: XOR<InvalidTokensCreateWithoutUserInput, InvalidTokensUncheckedCreateWithoutUserInput>
  }

  export type InvalidTokensCreateManyUserInputEnvelope = {
    data: InvalidTokensCreateManyUserInput | InvalidTokensCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResetTokensCreateWithoutUserInput = {
    token: string
    expires_at: Date | string
  }

  export type ResetTokensUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    expires_at: Date | string
  }

  export type ResetTokensCreateOrConnectWithoutUserInput = {
    where: ResetTokensWhereUniqueInput
    create: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
  }

  export type ProfilesCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
    levels?: LevelsCreateNestedManyWithoutProfileInput
  }

  export type ProfilesUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
    levels?: LevelsUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfilesCreateOrConnectWithoutUsersInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutUsersInput, ProfilesUncheckedCreateWithoutUsersInput>
  }

  export type LevelsCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    profile: ProfilesCreateNestedOneWithoutLevelsInput
    level_rewards?: LevelRewardsCreateNestedManyWithoutLevelInput
  }

  export type LevelsUncheckedCreateWithoutUsersInput = {
    id?: string
    profile_id: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    level_rewards?: LevelRewardsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelsCreateOrConnectWithoutUsersInput = {
    where: LevelsWhereUniqueInput
    create: XOR<LevelsCreateWithoutUsersInput, LevelsUncheckedCreateWithoutUsersInput>
  }

  export type RecyclingCreateWithoutUserInput = {
    id?: string
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    collect_point?: CollectionPointsCreateNestedOneWithoutRecyclingInput
    Bottles?: BottlesCreateNestedManyWithoutRecyclingInput
  }

  export type RecyclingUncheckedCreateWithoutUserInput = {
    id?: string
    collect_point_id?: string | null
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    Bottles?: BottlesUncheckedCreateNestedManyWithoutRecyclingInput
  }

  export type RecyclingCreateOrConnectWithoutUserInput = {
    where: RecyclingWhereUniqueInput
    create: XOR<RecyclingCreateWithoutUserInput, RecyclingUncheckedCreateWithoutUserInput>
  }

  export type RecyclingCreateManyUserInputEnvelope = {
    data: RecyclingCreateManyUserInput | RecyclingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvalidTokensUpsertWithWhereUniqueWithoutUserInput = {
    where: InvalidTokensWhereUniqueInput
    update: XOR<InvalidTokensUpdateWithoutUserInput, InvalidTokensUncheckedUpdateWithoutUserInput>
    create: XOR<InvalidTokensCreateWithoutUserInput, InvalidTokensUncheckedCreateWithoutUserInput>
  }

  export type InvalidTokensUpdateWithWhereUniqueWithoutUserInput = {
    where: InvalidTokensWhereUniqueInput
    data: XOR<InvalidTokensUpdateWithoutUserInput, InvalidTokensUncheckedUpdateWithoutUserInput>
  }

  export type InvalidTokensUpdateManyWithWhereWithoutUserInput = {
    where: InvalidTokensScalarWhereInput
    data: XOR<InvalidTokensUpdateManyMutationInput, InvalidTokensUncheckedUpdateManyWithoutUserInput>
  }

  export type InvalidTokensScalarWhereInput = {
    AND?: InvalidTokensScalarWhereInput | InvalidTokensScalarWhereInput[]
    OR?: InvalidTokensScalarWhereInput[]
    NOT?: InvalidTokensScalarWhereInput | InvalidTokensScalarWhereInput[]
    id?: IntFilter<"InvalidTokens"> | number
    user_id?: StringFilter<"InvalidTokens"> | string
    token?: StringFilter<"InvalidTokens"> | string
    invalidated_at?: DateTimeFilter<"InvalidTokens"> | Date | string
  }

  export type ResetTokensUpsertWithoutUserInput = {
    update: XOR<ResetTokensUpdateWithoutUserInput, ResetTokensUncheckedUpdateWithoutUserInput>
    create: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
    where?: ResetTokensWhereInput
  }

  export type ResetTokensUpdateToOneWithWhereWithoutUserInput = {
    where?: ResetTokensWhereInput
    data: XOR<ResetTokensUpdateWithoutUserInput, ResetTokensUncheckedUpdateWithoutUserInput>
  }

  export type ResetTokensUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokensUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUpsertWithoutUsersInput = {
    update: XOR<ProfilesUpdateWithoutUsersInput, ProfilesUncheckedUpdateWithoutUsersInput>
    create: XOR<ProfilesCreateWithoutUsersInput, ProfilesUncheckedCreateWithoutUsersInput>
    where?: ProfilesWhereInput
  }

  export type ProfilesUpdateToOneWithWhereWithoutUsersInput = {
    where?: ProfilesWhereInput
    data: XOR<ProfilesUpdateWithoutUsersInput, ProfilesUncheckedUpdateWithoutUsersInput>
  }

  export type ProfilesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    levels?: LevelsUpdateManyWithoutProfileNestedInput
  }

  export type ProfilesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    levels?: LevelsUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LevelsUpsertWithoutUsersInput = {
    update: XOR<LevelsUpdateWithoutUsersInput, LevelsUncheckedUpdateWithoutUsersInput>
    create: XOR<LevelsCreateWithoutUsersInput, LevelsUncheckedCreateWithoutUsersInput>
    where?: LevelsWhereInput
  }

  export type LevelsUpdateToOneWithWhereWithoutUsersInput = {
    where?: LevelsWhereInput
    data: XOR<LevelsUpdateWithoutUsersInput, LevelsUncheckedUpdateWithoutUsersInput>
  }

  export type LevelsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    profile?: ProfilesUpdateOneRequiredWithoutLevelsNestedInput
    level_rewards?: LevelRewardsUpdateManyWithoutLevelNestedInput
  }

  export type LevelsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    level_rewards?: LevelRewardsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type RecyclingUpsertWithWhereUniqueWithoutUserInput = {
    where: RecyclingWhereUniqueInput
    update: XOR<RecyclingUpdateWithoutUserInput, RecyclingUncheckedUpdateWithoutUserInput>
    create: XOR<RecyclingCreateWithoutUserInput, RecyclingUncheckedCreateWithoutUserInput>
  }

  export type RecyclingUpdateWithWhereUniqueWithoutUserInput = {
    where: RecyclingWhereUniqueInput
    data: XOR<RecyclingUpdateWithoutUserInput, RecyclingUncheckedUpdateWithoutUserInput>
  }

  export type RecyclingUpdateManyWithWhereWithoutUserInput = {
    where: RecyclingScalarWhereInput
    data: XOR<RecyclingUpdateManyMutationInput, RecyclingUncheckedUpdateManyWithoutUserInput>
  }

  export type RecyclingScalarWhereInput = {
    AND?: RecyclingScalarWhereInput | RecyclingScalarWhereInput[]
    OR?: RecyclingScalarWhereInput[]
    NOT?: RecyclingScalarWhereInput | RecyclingScalarWhereInput[]
    id?: StringFilter<"Recycling"> | string
    user_id?: StringFilter<"Recycling"> | string
    collect_point_id?: StringNullableFilter<"Recycling"> | string | null
    number_of_bottles?: IntFilter<"Recycling"> | number
    total_bottles_score?: IntFilter<"Recycling"> | number
    created_at?: DateTimeFilter<"Recycling"> | Date | string
    end_at?: DateTimeNullableFilter<"Recycling"> | Date | string | null
  }

  export type LevelsCreateWithoutProfileInput = {
    id?: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    level_rewards?: LevelRewardsCreateNestedManyWithoutLevelInput
    users?: UsersCreateNestedManyWithoutLevelInput
  }

  export type LevelsUncheckedCreateWithoutProfileInput = {
    id?: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    level_rewards?: LevelRewardsUncheckedCreateNestedManyWithoutLevelInput
    users?: UsersUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelsCreateOrConnectWithoutProfileInput = {
    where: LevelsWhereUniqueInput
    create: XOR<LevelsCreateWithoutProfileInput, LevelsUncheckedCreateWithoutProfileInput>
  }

  export type LevelsCreateManyProfileInputEnvelope = {
    data: LevelsCreateManyProfileInput | LevelsCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutProfileInput = {
    id?: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensCreateNestedOneWithoutUserInput
    level?: LevelsCreateNestedOneWithoutUsersInput
    recycling?: RecyclingCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutProfileInput = {
    id?: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensUncheckedCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensUncheckedCreateNestedOneWithoutUserInput
    recycling?: RecyclingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutProfileInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput>
  }

  export type UsersCreateManyProfileInputEnvelope = {
    data: UsersCreateManyProfileInput | UsersCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type LevelsUpsertWithWhereUniqueWithoutProfileInput = {
    where: LevelsWhereUniqueInput
    update: XOR<LevelsUpdateWithoutProfileInput, LevelsUncheckedUpdateWithoutProfileInput>
    create: XOR<LevelsCreateWithoutProfileInput, LevelsUncheckedCreateWithoutProfileInput>
  }

  export type LevelsUpdateWithWhereUniqueWithoutProfileInput = {
    where: LevelsWhereUniqueInput
    data: XOR<LevelsUpdateWithoutProfileInput, LevelsUncheckedUpdateWithoutProfileInput>
  }

  export type LevelsUpdateManyWithWhereWithoutProfileInput = {
    where: LevelsScalarWhereInput
    data: XOR<LevelsUpdateManyMutationInput, LevelsUncheckedUpdateManyWithoutProfileInput>
  }

  export type LevelsScalarWhereInput = {
    AND?: LevelsScalarWhereInput | LevelsScalarWhereInput[]
    OR?: LevelsScalarWhereInput[]
    NOT?: LevelsScalarWhereInput | LevelsScalarWhereInput[]
    id?: StringFilter<"Levels"> | string
    profile_id?: StringFilter<"Levels"> | string
    name?: StringFilter<"Levels"> | string
    description?: StringFilter<"Levels"> | string
    image?: StringFilter<"Levels"> | string
    required_score?: IntFilter<"Levels"> | number
    position?: IntNullableFilter<"Levels"> | number | null
    created_at?: DateTimeFilter<"Levels"> | Date | string
    unlocked?: BoolNullableFilter<"Levels"> | boolean | null
  }

  export type UsersUpsertWithWhereUniqueWithoutProfileInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutProfileInput, UsersUncheckedUpdateWithoutProfileInput>
    create: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutProfileInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutProfileInput, UsersUncheckedUpdateWithoutProfileInput>
  }

  export type UsersUpdateManyWithWhereWithoutProfileInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutProfileInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: StringFilter<"Users"> | string
    profile_id?: StringFilter<"Users"> | string
    level_id?: StringNullableFilter<"Users"> | string | null
    image?: StringNullableFilter<"Users"> | string | null
    name?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
  }

  export type UsersCreateWithoutInvalid_tokensInput = {
    id?: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    reset_token?: ResetTokensCreateNestedOneWithoutUserInput
    profile: ProfilesCreateNestedOneWithoutUsersInput
    level?: LevelsCreateNestedOneWithoutUsersInput
    recycling?: RecyclingCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutInvalid_tokensInput = {
    id?: string
    profile_id: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    reset_token?: ResetTokensUncheckedCreateNestedOneWithoutUserInput
    recycling?: RecyclingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutInvalid_tokensInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutInvalid_tokensInput, UsersUncheckedCreateWithoutInvalid_tokensInput>
  }

  export type UsersUpsertWithoutInvalid_tokensInput = {
    update: XOR<UsersUpdateWithoutInvalid_tokensInput, UsersUncheckedUpdateWithoutInvalid_tokensInput>
    create: XOR<UsersCreateWithoutInvalid_tokensInput, UsersUncheckedCreateWithoutInvalid_tokensInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutInvalid_tokensInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutInvalid_tokensInput, UsersUncheckedUpdateWithoutInvalid_tokensInput>
  }

  export type UsersUpdateWithoutInvalid_tokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: ResetTokensUpdateOneWithoutUserNestedInput
    profile?: ProfilesUpdateOneRequiredWithoutUsersNestedInput
    level?: LevelsUpdateOneWithoutUsersNestedInput
    recycling?: RecyclingUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutInvalid_tokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reset_token?: ResetTokensUncheckedUpdateOneWithoutUserNestedInput
    recycling?: RecyclingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutReset_tokenInput = {
    id?: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensCreateNestedManyWithoutUserInput
    profile: ProfilesCreateNestedOneWithoutUsersInput
    level?: LevelsCreateNestedOneWithoutUsersInput
    recycling?: RecyclingCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutReset_tokenInput = {
    id?: string
    profile_id: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensUncheckedCreateNestedManyWithoutUserInput
    recycling?: RecyclingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutReset_tokenInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutReset_tokenInput, UsersUncheckedCreateWithoutReset_tokenInput>
  }

  export type UsersUpsertWithoutReset_tokenInput = {
    update: XOR<UsersUpdateWithoutReset_tokenInput, UsersUncheckedUpdateWithoutReset_tokenInput>
    create: XOR<UsersCreateWithoutReset_tokenInput, UsersUncheckedCreateWithoutReset_tokenInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutReset_tokenInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutReset_tokenInput, UsersUncheckedUpdateWithoutReset_tokenInput>
  }

  export type UsersUpdateWithoutReset_tokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUpdateManyWithoutUserNestedInput
    profile?: ProfilesUpdateOneRequiredWithoutUsersNestedInput
    level?: LevelsUpdateOneWithoutUsersNestedInput
    recycling?: RecyclingUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutReset_tokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUncheckedUpdateManyWithoutUserNestedInput
    recycling?: RecyclingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfilesCreateWithoutLevelsInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
    users?: UsersCreateNestedManyWithoutProfileInput
  }

  export type ProfilesUncheckedCreateWithoutLevelsInput = {
    id?: string
    name: string
    description: string
    image: string
    created_at?: Date | string
    users?: UsersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfilesCreateOrConnectWithoutLevelsInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutLevelsInput, ProfilesUncheckedCreateWithoutLevelsInput>
  }

  export type LevelRewardsCreateWithoutLevelInput = {
    id?: string
    name: string
    description: string
    image: string
    unlocked_at?: Date | string | null
  }

  export type LevelRewardsUncheckedCreateWithoutLevelInput = {
    id?: string
    name: string
    description: string
    image: string
    unlocked_at?: Date | string | null
  }

  export type LevelRewardsCreateOrConnectWithoutLevelInput = {
    where: LevelRewardsWhereUniqueInput
    create: XOR<LevelRewardsCreateWithoutLevelInput, LevelRewardsUncheckedCreateWithoutLevelInput>
  }

  export type LevelRewardsCreateManyLevelInputEnvelope = {
    data: LevelRewardsCreateManyLevelInput | LevelRewardsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutLevelInput = {
    id?: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensCreateNestedOneWithoutUserInput
    profile: ProfilesCreateNestedOneWithoutUsersInput
    recycling?: RecyclingCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutLevelInput = {
    id?: string
    profile_id: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensUncheckedCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensUncheckedCreateNestedOneWithoutUserInput
    recycling?: RecyclingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutLevelInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLevelInput, UsersUncheckedCreateWithoutLevelInput>
  }

  export type UsersCreateManyLevelInputEnvelope = {
    data: UsersCreateManyLevelInput | UsersCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type ProfilesUpsertWithoutLevelsInput = {
    update: XOR<ProfilesUpdateWithoutLevelsInput, ProfilesUncheckedUpdateWithoutLevelsInput>
    create: XOR<ProfilesCreateWithoutLevelsInput, ProfilesUncheckedCreateWithoutLevelsInput>
    where?: ProfilesWhereInput
  }

  export type ProfilesUpdateToOneWithWhereWithoutLevelsInput = {
    where?: ProfilesWhereInput
    data: XOR<ProfilesUpdateWithoutLevelsInput, ProfilesUncheckedUpdateWithoutLevelsInput>
  }

  export type ProfilesUpdateWithoutLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateManyWithoutProfileNestedInput
  }

  export type ProfilesUncheckedUpdateWithoutLevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LevelRewardsUpsertWithWhereUniqueWithoutLevelInput = {
    where: LevelRewardsWhereUniqueInput
    update: XOR<LevelRewardsUpdateWithoutLevelInput, LevelRewardsUncheckedUpdateWithoutLevelInput>
    create: XOR<LevelRewardsCreateWithoutLevelInput, LevelRewardsUncheckedCreateWithoutLevelInput>
  }

  export type LevelRewardsUpdateWithWhereUniqueWithoutLevelInput = {
    where: LevelRewardsWhereUniqueInput
    data: XOR<LevelRewardsUpdateWithoutLevelInput, LevelRewardsUncheckedUpdateWithoutLevelInput>
  }

  export type LevelRewardsUpdateManyWithWhereWithoutLevelInput = {
    where: LevelRewardsScalarWhereInput
    data: XOR<LevelRewardsUpdateManyMutationInput, LevelRewardsUncheckedUpdateManyWithoutLevelInput>
  }

  export type LevelRewardsScalarWhereInput = {
    AND?: LevelRewardsScalarWhereInput | LevelRewardsScalarWhereInput[]
    OR?: LevelRewardsScalarWhereInput[]
    NOT?: LevelRewardsScalarWhereInput | LevelRewardsScalarWhereInput[]
    id?: StringFilter<"LevelRewards"> | string
    level_id?: StringFilter<"LevelRewards"> | string
    name?: StringFilter<"LevelRewards"> | string
    description?: StringFilter<"LevelRewards"> | string
    image?: StringFilter<"LevelRewards"> | string
    unlocked_at?: DateTimeNullableFilter<"LevelRewards"> | Date | string | null
  }

  export type UsersUpsertWithWhereUniqueWithoutLevelInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutLevelInput, UsersUncheckedUpdateWithoutLevelInput>
    create: XOR<UsersCreateWithoutLevelInput, UsersUncheckedCreateWithoutLevelInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutLevelInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutLevelInput, UsersUncheckedUpdateWithoutLevelInput>
  }

  export type UsersUpdateManyWithWhereWithoutLevelInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutLevelInput>
  }

  export type LevelsCreateWithoutLevel_rewardsInput = {
    id?: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    profile: ProfilesCreateNestedOneWithoutLevelsInput
    users?: UsersCreateNestedManyWithoutLevelInput
  }

  export type LevelsUncheckedCreateWithoutLevel_rewardsInput = {
    id?: string
    profile_id: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
    users?: UsersUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelsCreateOrConnectWithoutLevel_rewardsInput = {
    where: LevelsWhereUniqueInput
    create: XOR<LevelsCreateWithoutLevel_rewardsInput, LevelsUncheckedCreateWithoutLevel_rewardsInput>
  }

  export type LevelsUpsertWithoutLevel_rewardsInput = {
    update: XOR<LevelsUpdateWithoutLevel_rewardsInput, LevelsUncheckedUpdateWithoutLevel_rewardsInput>
    create: XOR<LevelsCreateWithoutLevel_rewardsInput, LevelsUncheckedCreateWithoutLevel_rewardsInput>
    where?: LevelsWhereInput
  }

  export type LevelsUpdateToOneWithWhereWithoutLevel_rewardsInput = {
    where?: LevelsWhereInput
    data: XOR<LevelsUpdateWithoutLevel_rewardsInput, LevelsUncheckedUpdateWithoutLevel_rewardsInput>
  }

  export type LevelsUpdateWithoutLevel_rewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    profile?: ProfilesUpdateOneRequiredWithoutLevelsNestedInput
    users?: UsersUpdateManyWithoutLevelNestedInput
  }

  export type LevelsUncheckedUpdateWithoutLevel_rewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: UsersUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type RecyclingCreateWithoutCollect_pointInput = {
    id?: string
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    user: UsersCreateNestedOneWithoutRecyclingInput
    Bottles?: BottlesCreateNestedManyWithoutRecyclingInput
  }

  export type RecyclingUncheckedCreateWithoutCollect_pointInput = {
    id?: string
    user_id: string
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    Bottles?: BottlesUncheckedCreateNestedManyWithoutRecyclingInput
  }

  export type RecyclingCreateOrConnectWithoutCollect_pointInput = {
    where: RecyclingWhereUniqueInput
    create: XOR<RecyclingCreateWithoutCollect_pointInput, RecyclingUncheckedCreateWithoutCollect_pointInput>
  }

  export type RecyclingCreateManyCollect_pointInputEnvelope = {
    data: RecyclingCreateManyCollect_pointInput | RecyclingCreateManyCollect_pointInput[]
    skipDuplicates?: boolean
  }

  export type RecyclingUpsertWithWhereUniqueWithoutCollect_pointInput = {
    where: RecyclingWhereUniqueInput
    update: XOR<RecyclingUpdateWithoutCollect_pointInput, RecyclingUncheckedUpdateWithoutCollect_pointInput>
    create: XOR<RecyclingCreateWithoutCollect_pointInput, RecyclingUncheckedCreateWithoutCollect_pointInput>
  }

  export type RecyclingUpdateWithWhereUniqueWithoutCollect_pointInput = {
    where: RecyclingWhereUniqueInput
    data: XOR<RecyclingUpdateWithoutCollect_pointInput, RecyclingUncheckedUpdateWithoutCollect_pointInput>
  }

  export type RecyclingUpdateManyWithWhereWithoutCollect_pointInput = {
    where: RecyclingScalarWhereInput
    data: XOR<RecyclingUpdateManyMutationInput, RecyclingUncheckedUpdateManyWithoutCollect_pointInput>
  }

  export type UsersCreateWithoutRecyclingInput = {
    id?: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensCreateNestedOneWithoutUserInput
    profile: ProfilesCreateNestedOneWithoutUsersInput
    level?: LevelsCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutRecyclingInput = {
    id?: string
    profile_id: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
    invalid_tokens?: InvalidTokensUncheckedCreateNestedManyWithoutUserInput
    reset_token?: ResetTokensUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutRecyclingInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRecyclingInput, UsersUncheckedCreateWithoutRecyclingInput>
  }

  export type CollectionPointsCreateWithoutRecyclingInput = {
    id?: string
    mac_address: string
    image: string
    name: string
    email: string
    whatsapp: string
    latitude: number
    longitude: number
    city: string
    uf: string
  }

  export type CollectionPointsUncheckedCreateWithoutRecyclingInput = {
    id?: string
    mac_address: string
    image: string
    name: string
    email: string
    whatsapp: string
    latitude: number
    longitude: number
    city: string
    uf: string
  }

  export type CollectionPointsCreateOrConnectWithoutRecyclingInput = {
    where: CollectionPointsWhereUniqueInput
    create: XOR<CollectionPointsCreateWithoutRecyclingInput, CollectionPointsUncheckedCreateWithoutRecyclingInput>
  }

  export type BottlesCreateWithoutRecyclingInput = {
    id?: string
    level: number
    points: number
    created_at?: Date | string
  }

  export type BottlesUncheckedCreateWithoutRecyclingInput = {
    id?: string
    level: number
    points: number
    created_at?: Date | string
  }

  export type BottlesCreateOrConnectWithoutRecyclingInput = {
    where: BottlesWhereUniqueInput
    create: XOR<BottlesCreateWithoutRecyclingInput, BottlesUncheckedCreateWithoutRecyclingInput>
  }

  export type BottlesCreateManyRecyclingInputEnvelope = {
    data: BottlesCreateManyRecyclingInput | BottlesCreateManyRecyclingInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutRecyclingInput = {
    update: XOR<UsersUpdateWithoutRecyclingInput, UsersUncheckedUpdateWithoutRecyclingInput>
    create: XOR<UsersCreateWithoutRecyclingInput, UsersUncheckedCreateWithoutRecyclingInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRecyclingInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRecyclingInput, UsersUncheckedUpdateWithoutRecyclingInput>
  }

  export type UsersUpdateWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUpdateOneWithoutUserNestedInput
    profile?: ProfilesUpdateOneRequiredWithoutUsersNestedInput
    level?: LevelsUpdateOneWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUncheckedUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CollectionPointsUpsertWithoutRecyclingInput = {
    update: XOR<CollectionPointsUpdateWithoutRecyclingInput, CollectionPointsUncheckedUpdateWithoutRecyclingInput>
    create: XOR<CollectionPointsCreateWithoutRecyclingInput, CollectionPointsUncheckedCreateWithoutRecyclingInput>
    where?: CollectionPointsWhereInput
  }

  export type CollectionPointsUpdateToOneWithWhereWithoutRecyclingInput = {
    where?: CollectionPointsWhereInput
    data: XOR<CollectionPointsUpdateWithoutRecyclingInput, CollectionPointsUncheckedUpdateWithoutRecyclingInput>
  }

  export type CollectionPointsUpdateWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    mac_address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionPointsUncheckedUpdateWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    mac_address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type BottlesUpsertWithWhereUniqueWithoutRecyclingInput = {
    where: BottlesWhereUniqueInput
    update: XOR<BottlesUpdateWithoutRecyclingInput, BottlesUncheckedUpdateWithoutRecyclingInput>
    create: XOR<BottlesCreateWithoutRecyclingInput, BottlesUncheckedCreateWithoutRecyclingInput>
  }

  export type BottlesUpdateWithWhereUniqueWithoutRecyclingInput = {
    where: BottlesWhereUniqueInput
    data: XOR<BottlesUpdateWithoutRecyclingInput, BottlesUncheckedUpdateWithoutRecyclingInput>
  }

  export type BottlesUpdateManyWithWhereWithoutRecyclingInput = {
    where: BottlesScalarWhereInput
    data: XOR<BottlesUpdateManyMutationInput, BottlesUncheckedUpdateManyWithoutRecyclingInput>
  }

  export type BottlesScalarWhereInput = {
    AND?: BottlesScalarWhereInput | BottlesScalarWhereInput[]
    OR?: BottlesScalarWhereInput[]
    NOT?: BottlesScalarWhereInput | BottlesScalarWhereInput[]
    id?: StringFilter<"Bottles"> | string
    recycling_id?: StringFilter<"Bottles"> | string
    level?: IntFilter<"Bottles"> | number
    points?: IntFilter<"Bottles"> | number
    created_at?: DateTimeFilter<"Bottles"> | Date | string
  }

  export type RecyclingCreateWithoutBottlesInput = {
    id?: string
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
    user: UsersCreateNestedOneWithoutRecyclingInput
    collect_point?: CollectionPointsCreateNestedOneWithoutRecyclingInput
  }

  export type RecyclingUncheckedCreateWithoutBottlesInput = {
    id?: string
    user_id: string
    collect_point_id?: string | null
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
  }

  export type RecyclingCreateOrConnectWithoutBottlesInput = {
    where: RecyclingWhereUniqueInput
    create: XOR<RecyclingCreateWithoutBottlesInput, RecyclingUncheckedCreateWithoutBottlesInput>
  }

  export type RecyclingUpsertWithoutBottlesInput = {
    update: XOR<RecyclingUpdateWithoutBottlesInput, RecyclingUncheckedUpdateWithoutBottlesInput>
    create: XOR<RecyclingCreateWithoutBottlesInput, RecyclingUncheckedCreateWithoutBottlesInput>
    where?: RecyclingWhereInput
  }

  export type RecyclingUpdateToOneWithWhereWithoutBottlesInput = {
    where?: RecyclingWhereInput
    data: XOR<RecyclingUpdateWithoutBottlesInput, RecyclingUncheckedUpdateWithoutBottlesInput>
  }

  export type RecyclingUpdateWithoutBottlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UsersUpdateOneRequiredWithoutRecyclingNestedInput
    collect_point?: CollectionPointsUpdateOneWithoutRecyclingNestedInput
  }

  export type RecyclingUncheckedUpdateWithoutBottlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    collect_point_id?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvalidTokensCreateManyUserInput = {
    id?: number
    token: string
    invalidated_at?: Date | string
  }

  export type RecyclingCreateManyUserInput = {
    id?: string
    collect_point_id?: string | null
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
  }

  export type InvalidTokensUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvalidTokensUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvalidTokensUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    invalidated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecyclingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    collect_point?: CollectionPointsUpdateOneWithoutRecyclingNestedInput
    Bottles?: BottlesUpdateManyWithoutRecyclingNestedInput
  }

  export type RecyclingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    collect_point_id?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Bottles?: BottlesUncheckedUpdateManyWithoutRecyclingNestedInput
  }

  export type RecyclingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    collect_point_id?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LevelsCreateManyProfileInput = {
    id?: string
    name: string
    description: string
    image: string
    required_score: number
    position?: number | null
    created_at?: Date | string
    unlocked?: boolean | null
  }

  export type UsersCreateManyProfileInput = {
    id?: string
    level_id?: string | null
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type LevelsUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    level_rewards?: LevelRewardsUpdateManyWithoutLevelNestedInput
    users?: UsersUpdateManyWithoutLevelNestedInput
  }

  export type LevelsUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    level_rewards?: LevelRewardsUncheckedUpdateManyWithoutLevelNestedInput
    users?: UsersUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelsUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    required_score?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    unlocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UsersUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUpdateOneWithoutUserNestedInput
    level?: LevelsUpdateOneWithoutUsersNestedInput
    recycling?: RecyclingUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUncheckedUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUncheckedUpdateOneWithoutUserNestedInput
    recycling?: RecyclingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    level_id?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelRewardsCreateManyLevelInput = {
    id?: string
    name: string
    description: string
    image: string
    unlocked_at?: Date | string | null
  }

  export type UsersCreateManyLevelInput = {
    id?: string
    profile_id: string
    image?: string | null
    name: string
    username: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type LevelRewardsUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LevelRewardsUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LevelRewardsUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    unlocked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUpdateOneWithoutUserNestedInput
    profile?: ProfilesUpdateOneRequiredWithoutUsersNestedInput
    recycling?: RecyclingUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    invalid_tokens?: InvalidTokensUncheckedUpdateManyWithoutUserNestedInput
    reset_token?: ResetTokensUncheckedUpdateOneWithoutUserNestedInput
    recycling?: RecyclingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile_id?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecyclingCreateManyCollect_pointInput = {
    id?: string
    user_id: string
    number_of_bottles: number
    total_bottles_score: number
    created_at?: Date | string
    end_at?: Date | string | null
  }

  export type RecyclingUpdateWithoutCollect_pointInput = {
    id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UsersUpdateOneRequiredWithoutRecyclingNestedInput
    Bottles?: BottlesUpdateManyWithoutRecyclingNestedInput
  }

  export type RecyclingUncheckedUpdateWithoutCollect_pointInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Bottles?: BottlesUncheckedUpdateManyWithoutRecyclingNestedInput
  }

  export type RecyclingUncheckedUpdateManyWithoutCollect_pointInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    number_of_bottles?: IntFieldUpdateOperationsInput | number
    total_bottles_score?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BottlesCreateManyRecyclingInput = {
    id?: string
    level: number
    points: number
    created_at?: Date | string
  }

  export type BottlesUpdateWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BottlesUncheckedUpdateWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BottlesUncheckedUpdateManyWithoutRecyclingInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfilesCountOutputTypeDefaultArgs instead
     */
    export type ProfilesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfilesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LevelsCountOutputTypeDefaultArgs instead
     */
    export type LevelsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LevelsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionPointsCountOutputTypeDefaultArgs instead
     */
    export type CollectionPointsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionPointsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecyclingCountOutputTypeDefaultArgs instead
     */
    export type RecyclingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecyclingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfilesDefaultArgs instead
     */
    export type ProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfilesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvalidTokensDefaultArgs instead
     */
    export type InvalidTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvalidTokensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResetTokensDefaultArgs instead
     */
    export type ResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResetTokensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LevelsDefaultArgs instead
     */
    export type LevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LevelsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LevelRewardsDefaultArgs instead
     */
    export type LevelRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LevelRewardsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionPointsDefaultArgs instead
     */
    export type CollectionPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionPointsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecyclingDefaultArgs instead
     */
    export type RecyclingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecyclingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BottlesDefaultArgs instead
     */
    export type BottlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BottlesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}